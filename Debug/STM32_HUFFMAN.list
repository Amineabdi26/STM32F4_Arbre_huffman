
STM32_HUFFMAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  080020a4  080020a4  000030a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d0  080023d0  0000406c  2**0
                  CONTENTS
  4 .ARM          00000008  080023d0  080023d0  000033d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023d8  080023d8  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d8  080023d8  000033d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023dc  080023dc  000033dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080023e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d10  2000006c  0800244c  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  0800244c  00004d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ff4  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dac  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00007e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fb  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b15c  00000000  00000000  0000831b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000489d  00000000  00000000  00023477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091069  00000000  00000000  00027d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001120  00000000  00000000  000b8dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000b9ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800208c 	.word	0x0800208c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800208c 	.word	0x0800208c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <GPIO_Init+0x30>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a09      	ldr	r2, [pc, #36]	@ (80002e0 <GPIO_Init+0x30>)
 80002ba:	f043 0305 	orr.w	r3, r3, #5
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <GPIO_Init+0x34>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <GPIO_Init+0x34>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <GPIO_Init+0x38>)
 80002ce:	4a06      	ldr	r2, [pc, #24]	@ (80002e8 <GPIO_Init+0x38>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40020800 	.word	0x40020800

080002ec <occurence>:
#include "huffman.h"

// Fonction pour compter les occurrences des caract√®res
void occurence(uint8_t* chaine, uint32_t tab[256]) {
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 256; i++) {
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	e008      	b.n	800030e <occurence+0x22>
        tab[i] = 0;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	683a      	ldr	r2, [r7, #0]
 8000302:	4413      	add	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2bff      	cmp	r3, #255	@ 0xff
 8000312:	ddf3      	ble.n	80002fc <occurence+0x10>
    }
    while (*chaine) {
 8000314:	e00a      	b.n	800032c <occurence+0x40>
        tab[*chaine]++;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	4413      	add	r3, r2
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	3201      	adds	r2, #1
 8000324:	601a      	str	r2, [r3, #0]
        chaine++;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
    while (*chaine) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f0      	bne.n	8000316 <occurence+0x2a>
    }
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
	...

08000344 <afficherOccurrencesUART>:

void afficherOccurrencesUART(uint32_t tab[256]) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

    printf("Caractere\tOccurrences\r\n");
 800034c:	4812      	ldr	r0, [pc, #72]	@ (8000398 <afficherOccurrencesUART+0x54>)
 800034e:	f001 f8d3 	bl	80014f8 <puts>
    printf("-------------------------\r\n");
 8000352:	4812      	ldr	r0, [pc, #72]	@ (800039c <afficherOccurrencesUART+0x58>)
 8000354:	f001 f8d0 	bl	80014f8 <puts>

    for (int i = 0; i < 256; i++) {
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	e013      	b.n	8000386 <afficherOccurrencesUART+0x42>
        if (tab[i] > 0) {
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d009      	beq.n	8000380 <afficherOccurrencesUART+0x3c>
            printf("%c\t\t%d\r\n", i, tab[i]);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	461a      	mov	r2, r3
 8000378:	68f9      	ldr	r1, [r7, #12]
 800037a:	4809      	ldr	r0, [pc, #36]	@ (80003a0 <afficherOccurrencesUART+0x5c>)
 800037c:	f001 f854 	bl	8001428 <iprintf>
    for (int i = 0; i < 256; i++) {
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2bff      	cmp	r3, #255	@ 0xff
 800038a:	dde8      	ble.n	800035e <afficherOccurrencesUART+0x1a>
        }
    }
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	080020a4 	.word	0x080020a4
 800039c:	080020bc 	.word	0x080020bc
 80003a0:	080020d8 	.word	0x080020d8

080003a4 <creerFeuille>:


// Fonction pour cr√©er les feuilles de l'arbre de Huffman
void creerFeuille(struct noeud* arbre[256], uint32_t tab[256]) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	uint32_t j = 0 ;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 256; i++) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	e035      	b.n	8000424 <creerFeuille+0x80>
        if (tab[i] > 0) { // Si le caract√®re a au moins une occurrence
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	4413      	add	r3, r2
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d02b      	beq.n	800041e <creerFeuille+0x7a>
            // Allocation dynamique d'une feuille
            struct noeud* feuille = (struct noeud*)malloc(sizeof(struct noeud));
 80003c6:	2018      	movs	r0, #24
 80003c8:	f000 feae 	bl	8001128 <malloc>
 80003cc:	4603      	mov	r3, r0
 80003ce:	60fb      	str	r3, [r7, #12]
            if (feuille == NULL) {
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d103      	bne.n	80003de <creerFeuille+0x3a>
                printf("Erreur d'allocation m√©moire\n");
 80003d6:	4816      	ldr	r0, [pc, #88]	@ (8000430 <creerFeuille+0x8c>)
 80003d8:	f001 f88e 	bl	80014f8 <puts>
                return;
 80003dc:	e025      	b.n	800042a <creerFeuille+0x86>
            }
            feuille->c = (uint8_t)i;
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	701a      	strb	r2, [r3, #0]
            feuille->occurence = tab[i];
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4413      	add	r3, r2
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	605a      	str	r2, [r3, #4]
            feuille->gauche = NULL;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
            feuille->droite = NULL;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
            feuille->code = 0;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
            feuille->tailleCode = 0;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
            arbre[j] = feuille;
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	601a      	str	r2, [r3, #0]
            j++;
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	3301      	adds	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 256; i++) {
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	3301      	adds	r3, #1
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	2bff      	cmp	r3, #255	@ 0xff
 8000428:	ddc6      	ble.n	80003b8 <creerFeuille+0x14>
        }
    }
}
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	080020e4 	.word	0x080020e4

08000434 <afficherFeuilles>:

void afficherFeuilles(struct noeud* arbre[256]) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b089      	sub	sp, #36	@ 0x24
 8000438:	af04      	add	r7, sp, #16
 800043a:	6078      	str	r0, [r7, #4]
    printf("`\nFeuilles de l'arbre de Huffman :\r\n");
 800043c:	4828      	ldr	r0, [pc, #160]	@ (80004e0 <afficherFeuilles+0xac>)
 800043e:	f001 f85b 	bl	80014f8 <puts>
    printf("Caractere\tOccurrences\tCode\tTaille Code\tAdresse\t\tGauche\t\tDroite\r\n");
 8000442:	4828      	ldr	r0, [pc, #160]	@ (80004e4 <afficherFeuilles+0xb0>)
 8000444:	f001 f858 	bl	80014f8 <puts>
    printf("---------------------------------------------------------------------------------------\r\n");
 8000448:	4827      	ldr	r0, [pc, #156]	@ (80004e8 <afficherFeuilles+0xb4>)
 800044a:	f001 f855 	bl	80014f8 <puts>

    for (int i = 0; i < 256; i++) {
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	e03d      	b.n	80004d0 <afficherFeuilles+0x9c>
        if (arbre[i] != NULL) {
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	4413      	add	r3, r2
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d033      	beq.n	80004ca <afficherFeuilles+0x96>
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
                   arbre[i]->c,
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	781b      	ldrb	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 800046e:	469c      	mov	ip, r3
                   arbre[i]->occurence,
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	4413      	add	r3, r2
 8000478:	681b      	ldr	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 800047a:	685d      	ldr	r5, [r3, #4]
                   arbre[i]->code,
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	681b      	ldr	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 8000486:	689e      	ldr	r6, [r3, #8]
                   arbre[i]->tailleCode,
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	681b      	ldr	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 8000492:	68db      	ldr	r3, [r3, #12]
                   arbre[i],
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	440a      	add	r2, r1
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 800049c:	6812      	ldr	r2, [r2, #0]
                   arbre[i]->gauche,
 800049e:	68f9      	ldr	r1, [r7, #12]
 80004a0:	0089      	lsls	r1, r1, #2
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	4401      	add	r1, r0
 80004a6:	6809      	ldr	r1, [r1, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80004a8:	6909      	ldr	r1, [r1, #16]
                   arbre[i]->droite);
 80004aa:	68f8      	ldr	r0, [r7, #12]
 80004ac:	0080      	lsls	r0, r0, #2
 80004ae:	687c      	ldr	r4, [r7, #4]
 80004b0:	4420      	add	r0, r4
 80004b2:	6800      	ldr	r0, [r0, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80004b4:	6940      	ldr	r0, [r0, #20]
 80004b6:	9003      	str	r0, [sp, #12]
 80004b8:	9102      	str	r1, [sp, #8]
 80004ba:	9201      	str	r2, [sp, #4]
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	4633      	mov	r3, r6
 80004c0:	462a      	mov	r2, r5
 80004c2:	4661      	mov	r1, ip
 80004c4:	4809      	ldr	r0, [pc, #36]	@ (80004ec <afficherFeuilles+0xb8>)
 80004c6:	f000 ffaf 	bl	8001428 <iprintf>
    for (int i = 0; i < 256; i++) {
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2bff      	cmp	r3, #255	@ 0xff
 80004d4:	ddbe      	ble.n	8000454 <afficherFeuilles+0x20>
        }
    }
}
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	08002104 	.word	0x08002104
 80004e4:	08002128 	.word	0x08002128
 80004e8:	08002168 	.word	0x08002168
 80004ec:	080021c4 	.word	0x080021c4

080004f0 <triArbre>:

void triArbre(struct noeud* arbre[256], uint32_t taille) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
    struct noeud* f;
    for (int i = 0; i < taille - 1; i++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e036      	b.n	800056e <triArbre+0x7e>
        for (int j = 0; j < taille - i - 1; j++) {
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	e029      	b.n	800055a <triArbre+0x6a>
            if (arbre[j]->occurence > arbre[j + 1]->occurence) {
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	3301      	adds	r3, #1
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	440b      	add	r3, r1
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	d917      	bls.n	8000554 <triArbre+0x64>
                f = arbre[j];
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	60fb      	str	r3, [r7, #12]
                arbre[j] = arbre[j + 1];
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	441a      	add	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	440b      	add	r3, r1
 8000542:	6812      	ldr	r2, [r2, #0]
 8000544:	601a      	str	r2, [r3, #0]
                arbre[j + 1] = f;
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	3301      	adds	r3, #1
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < taille - i - 1; j++) {
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	3301      	adds	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	1e5a      	subs	r2, r3, #1
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d8ce      	bhi.n	8000506 <triArbre+0x16>
    for (int i = 0; i < taille - 1; i++) {
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	429a      	cmp	r2, r3
 8000576:	d8c3      	bhi.n	8000500 <triArbre+0x10>
            }
        }
    }
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	371c      	adds	r7, #28
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <afficherTabArbreHuffman>:


void afficherTabArbreHuffman(struct noeud* arbre[256], uint32_t taille) {
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	b089      	sub	sp, #36	@ 0x24
 800058c:	af04      	add	r7, sp, #16
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
    printf("\nAffichage de %d elements de l'arbre de Huffman :\r\n", taille);
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	4829      	ldr	r0, [pc, #164]	@ (800063c <afficherTabArbreHuffman+0xb4>)
 8000596:	f000 ff47 	bl	8001428 <iprintf>
    printf("Caractere\tOccurrences\tCode\tTaille Code\tAdresse\t\tGauche\t\tDroite\r\n");
 800059a:	4829      	ldr	r0, [pc, #164]	@ (8000640 <afficherTabArbreHuffman+0xb8>)
 800059c:	f000 ffac 	bl	80014f8 <puts>
    printf("---------------------------------------------------------------------------------------\r\n");
 80005a0:	4828      	ldr	r0, [pc, #160]	@ (8000644 <afficherTabArbreHuffman+0xbc>)
 80005a2:	f000 ffa9 	bl	80014f8 <puts>

    for (uint32_t i = 0; i < taille; i++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e03d      	b.n	8000628 <afficherTabArbreHuffman+0xa0>
        if (arbre[i] != NULL) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d033      	beq.n	8000622 <afficherTabArbreHuffman+0x9a>
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
                   arbre[i]->c,
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	781b      	ldrb	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80005c6:	469c      	mov	ip, r3
                   arbre[i]->occurence,
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80005d2:	685d      	ldr	r5, [r3, #4]
                   arbre[i]->code,
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4413      	add	r3, r2
 80005dc:	681b      	ldr	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80005de:	689e      	ldr	r6, [r3, #8]
                   arbre[i]->tailleCode,
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	681b      	ldr	r3, [r3, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80005ea:	68db      	ldr	r3, [r3, #12]
                   arbre[i],
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	440a      	add	r2, r1
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 80005f4:	6812      	ldr	r2, [r2, #0]
                   arbre[i]->gauche,
 80005f6:	68f9      	ldr	r1, [r7, #12]
 80005f8:	0089      	lsls	r1, r1, #2
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	4401      	add	r1, r0
 80005fe:	6809      	ldr	r1, [r1, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 8000600:	6909      	ldr	r1, [r1, #16]
                   arbre[i]->droite);
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	0080      	lsls	r0, r0, #2
 8000606:	687c      	ldr	r4, [r7, #4]
 8000608:	4420      	add	r0, r4
 800060a:	6800      	ldr	r0, [r0, #0]
            printf("%c\t\t%d\t\t%x\t%d\t\t%lx\t%lx\t%lx\r\n",
 800060c:	6940      	ldr	r0, [r0, #20]
 800060e:	9003      	str	r0, [sp, #12]
 8000610:	9102      	str	r1, [sp, #8]
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4633      	mov	r3, r6
 8000618:	462a      	mov	r2, r5
 800061a:	4661      	mov	r1, ip
 800061c:	480a      	ldr	r0, [pc, #40]	@ (8000648 <afficherTabArbreHuffman+0xc0>)
 800061e:	f000 ff03 	bl	8001428 <iprintf>
    for (uint32_t i = 0; i < taille; i++) {
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3bd      	bcc.n	80005ac <afficherTabArbreHuffman+0x24>
        }
    }
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063a:	bf00      	nop
 800063c:	080021e4 	.word	0x080021e4
 8000640:	08002128 	.word	0x08002128
 8000644:	08002168 	.word	0x08002168
 8000648:	080021c4 	.word	0x080021c4

0800064c <creerNoeud>:


// Fonction pour cr√©er des n≈ìuds jusqu'√† obtenir la racine de l'arbre de Huffman
struct noeud* creerNoeud(struct noeud* arbre[256], uint32_t* taille) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    while (*taille > 1) {
 8000656:	e039      	b.n	80006cc <creerNoeud+0x80>
        triArbre(arbre, *taille);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff46 	bl	80004f0 <triArbre>
        struct noeud* newNoeud = (struct noeud*)malloc(sizeof(struct noeud));
 8000664:	2018      	movs	r0, #24
 8000666:	f000 fd5f 	bl	8001128 <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	60fb      	str	r3, [r7, #12]
        newNoeud->gauche = arbre[0];
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	611a      	str	r2, [r3, #16]
        newNoeud->droite = arbre[1];
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	615a      	str	r2, [r3, #20]
        newNoeud->occurence = arbre[0]->occurence + arbre[1]->occurence;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3304      	adds	r3, #4
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	441a      	add	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	605a      	str	r2, [r3, #4]
        newNoeud->code = 0;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
        newNoeud->tailleCode = 0;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
        newNoeud->c = 0;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]

        arbre[0] = newNoeud;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	601a      	str	r2, [r3, #0]
        arbre[1] = arbre[*taille - 1];
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80006b2:	3b01      	subs	r3, #1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	441a      	add	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3304      	adds	r3, #4
 80006be:	6812      	ldr	r2, [r2, #0]
 80006c0:	601a      	str	r2, [r3, #0]
        (*taille)--;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	601a      	str	r2, [r3, #0]
    while (*taille > 1) {
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d8c1      	bhi.n	8000658 <creerNoeud+0xc>
    }

    return arbre[0];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <parcourirArbre>:

void parcourirArbre(struct noeud* ptrNoeud) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    if (ptrNoeud == NULL) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d022      	beq.n	8000734 <parcourirArbre+0x54>
        return;
    }

    if (ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10d      	bne.n	8000712 <parcourirArbre+0x32>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d109      	bne.n	8000712 <parcourirArbre+0x32>
        printf("Je suis une feuille : '%c' avec %d occurrences.\r\n", ptrNoeud->c, ptrNoeud->occurence);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	461a      	mov	r2, r3
 800070a:	480c      	ldr	r0, [pc, #48]	@ (800073c <parcourirArbre+0x5c>)
 800070c:	f000 fe8c 	bl	8001428 <iprintf>
 8000710:	e011      	b.n	8000736 <parcourirArbre+0x56>
    }
    else {
        printf("Je suis un n≈ìud avec %d occurrences.\r\n", ptrNoeud->occurence);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4619      	mov	r1, r3
 8000718:	4809      	ldr	r0, [pc, #36]	@ (8000740 <parcourirArbre+0x60>)
 800071a:	f000 fe85 	bl	8001428 <iprintf>
        parcourirArbre(ptrNoeud->gauche);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffdc 	bl	80006e0 <parcourirArbre>
        parcourirArbre(ptrNoeud->droite);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ffd7 	bl	80006e0 <parcourirArbre>
 8000732:	e000      	b.n	8000736 <parcourirArbre+0x56>
        return;
 8000734:	bf00      	nop
    }
}
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08002218 	.word	0x08002218
 8000740:	0800224c 	.word	0x0800224c

08000744 <libererMemoireArbre>:

// Fonction pour lib√©rer la m√©moire de l'arbre de Huffman
void libererMemoireArbre(struct noeud* ptrNoeud) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    if (ptrNoeud == NULL) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00d      	beq.n	800076e <libererMemoireArbre+0x2a>
        return;
    }
    libererMemoireArbre(ptrNoeud->gauche);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fff4 	bl	8000744 <libererMemoireArbre>
    libererMemoireArbre(ptrNoeud->droite);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ffef 	bl	8000744 <libererMemoireArbre>
    free(ptrNoeud);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 fce6 	bl	8001138 <free>
 800076c:	e000      	b.n	8000770 <libererMemoireArbre+0x2c>
        return;
 800076e:	bf00      	nop
}
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <creerCode>:

void creerCode(struct noeud* ptrNoeud, uint32_t code, uint32_t taille) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
    if (ptrNoeud == NULL) {
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d040      	beq.n	800080c <creerCode+0x94>
        return;
    }
    if (ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL) {
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d128      	bne.n	80007e4 <creerCode+0x6c>
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d124      	bne.n	80007e4 <creerCode+0x6c>
        ptrNoeud->tailleCode = taille;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	60da      	str	r2, [r3, #12]
        ptrNoeud->code = code;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	609a      	str	r2, [r3, #8]
        printf("Caractere : '%c' \t Code : ", ptrNoeud->c);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4819      	ldr	r0, [pc, #100]	@ (8000814 <creerCode+0x9c>)
 80007ae:	f000 fe3b 	bl	8001428 <iprintf>
        for (int i = taille - 1; i >= 0; i--) {
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e00c      	b.n	80007d4 <creerCode+0x5c>
            printf("%d", (code >> i) & 1);
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa22 f303 	lsr.w	r3, r2, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <creerCode+0xa0>)
 80007ca:	f000 fe2d 	bl	8001428 <iprintf>
        for (int i = taille - 1; i >= 0; i--) {
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	daef      	bge.n	80007ba <creerCode+0x42>
        }
        printf(" \t Taille : %d bits\r\n", taille);
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	480f      	ldr	r0, [pc, #60]	@ (800081c <creerCode+0xa4>)
 80007de:	f000 fe23 	bl	8001428 <iprintf>
 80007e2:	e014      	b.n	800080e <creerCode+0x96>
    } else {
        creerCode(ptrNoeud->droite, code << 1, taille + 1);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6958      	ldr	r0, [r3, #20]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	0059      	lsls	r1, r3, #1
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	461a      	mov	r2, r3
 80007f2:	f7ff ffc1 	bl	8000778 <creerCode>
        creerCode(ptrNoeud->gauche, (code << 1) + 1, taille + 1);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6918      	ldr	r0, [r3, #16]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	1c59      	adds	r1, r3, #1
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	461a      	mov	r2, r3
 8000806:	f7ff ffb7 	bl	8000778 <creerCode>
 800080a:	e000      	b.n	800080e <creerCode+0x96>
        return;
 800080c:	bf00      	nop
    }
}
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08002274 	.word	0x08002274
 8000818:	08002290 	.word	0x08002290
 800081c:	08002294 	.word	0x08002294

08000820 <getAddress>:

// Fonction pour retrouver le n≈ìud correspondant √† un caract√®re dans l'arbre de Huffman
struct noeud* getAddress(struct noeud* ptrNoeud, uint8_t caractere) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
    if (ptrNoeud == NULL) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <getAddress+0x16>
        return NULL;
 8000832:	2300      	movs	r3, #0
 8000834:	e023      	b.n	800087e <getAddress+0x5e>
    }
    if (ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL && ptrNoeud->c == caractere) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10a      	bne.n	8000854 <getAddress+0x34>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <getAddress+0x34>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	78fa      	ldrb	r2, [r7, #3]
 800084c:	429a      	cmp	r2, r3
 800084e:	d101      	bne.n	8000854 <getAddress+0x34>
        return ptrNoeud;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	e014      	b.n	800087e <getAddress+0x5e>
    }

    struct noeud* gauche = getAddress(ptrNoeud->gauche, caractere);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	78fa      	ldrb	r2, [r7, #3]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ffdf 	bl	8000820 <getAddress>
 8000862:	60f8      	str	r0, [r7, #12]
    if (gauche != NULL) return gauche;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <getAddress+0x4e>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	e007      	b.n	800087e <getAddress+0x5e>

    return getAddress(ptrNoeud->droite, caractere);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	78fa      	ldrb	r2, [r7, #3]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffd2 	bl	8000820 <getAddress>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	ticks++;
 800088c:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Handler+0x18>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a03      	ldr	r2, [pc, #12]	@ (80008a0 <SysTick_Handler+0x18>)
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20001c2c 	.word	0x20001c2c

080008a4 <main>:
    struct Entete entete;
    uint32_t nbrCaractereTotal = 0;
    char texteCompressBinaire[TAILLE_MAX_COMPRESS * 8] = {0}; // Cha√Æne pour le texte compress√© en binaire
uint8_t rx ;
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0

	GPIO_Init();
 80008aa:	f7ff fd01 	bl	80002b0 <GPIO_Init>
	USART1_Init();
 80008ae:	f000 fb69 	bl	8000f84 <USART1_Init>
	USART2_Init();
 80008b2:	f000 fb2d 	bl	8000f10 <USART2_Init>
	SYSTICK_Init();
 80008b6:	f000 faf7 	bl	8000ea8 <SYSTICK_Init>
	USART1_TransmitChar('B');
 80008ba:	2042      	movs	r0, #66	@ 0x42
 80008bc:	f000 fbb4 	bl	8001028 <USART1_TransmitChar>
	rx=USART1_ReceiveChar();
 80008c0:	f000 fbde 	bl	8001080 <USART1_ReceiveChar>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b58      	ldr	r3, [pc, #352]	@ (8000a2c <main+0x188>)
 80008ca:	701a      	strb	r2, [r3, #0]
    // Calcul du nombre total de caract√®res dans le texte d'origine
    for (int i = 0; texte[i] != '\0'; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e007      	b.n	80008e2 <main+0x3e>
        nbrCaractereTotal++;
 80008d2:	4b57      	ldr	r3, [pc, #348]	@ (8000a30 <main+0x18c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a55      	ldr	r2, [pc, #340]	@ (8000a30 <main+0x18c>)
 80008da:	6013      	str	r3, [r2, #0]
    for (int i = 0; texte[i] != '\0'; i++) {
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4a54      	ldr	r2, [pc, #336]	@ (8000a34 <main+0x190>)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f1      	bne.n	80008d2 <main+0x2e>
    }
    occurence(texte, tabCaractere);
 80008ee:	4952      	ldr	r1, [pc, #328]	@ (8000a38 <main+0x194>)
 80008f0:	4850      	ldr	r0, [pc, #320]	@ (8000a34 <main+0x190>)
 80008f2:	f7ff fcfb 	bl	80002ec <occurence>
    afficherOccurrencesUART(tabCaractere);
 80008f6:	4850      	ldr	r0, [pc, #320]	@ (8000a38 <main+0x194>)
 80008f8:	f7ff fd24 	bl	8000344 <afficherOccurrencesUART>
    creerFeuille(arbreHuffman, tabCaractere);
 80008fc:	494e      	ldr	r1, [pc, #312]	@ (8000a38 <main+0x194>)
 80008fe:	484f      	ldr	r0, [pc, #316]	@ (8000a3c <main+0x198>)
 8000900:	f7ff fd50 	bl	80003a4 <creerFeuille>
    for (int i = 0; i < 256; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	e00d      	b.n	8000926 <main+0x82>
        if (tabCaractere[i] > 0) {
 800090a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a38 <main+0x194>)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <main+0x7c>
            nbrCaractereDifferent++;
 8000916:	4b4a      	ldr	r3, [pc, #296]	@ (8000a40 <main+0x19c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a48      	ldr	r2, [pc, #288]	@ (8000a40 <main+0x19c>)
 800091e:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 256; i++) {
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	3301      	adds	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	2bff      	cmp	r3, #255	@ 0xff
 800092a:	ddee      	ble.n	800090a <main+0x66>
        }
    }
    afficherFeuilles(arbreHuffman);
 800092c:	4843      	ldr	r0, [pc, #268]	@ (8000a3c <main+0x198>)
 800092e:	f7ff fd81 	bl	8000434 <afficherFeuilles>


    afficherTabArbreHuffman(arbreHuffman, nbrCaractereDifferent);
 8000932:	4b43      	ldr	r3, [pc, #268]	@ (8000a40 <main+0x19c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	4840      	ldr	r0, [pc, #256]	@ (8000a3c <main+0x198>)
 800093a:	f7ff fe25 	bl	8000588 <afficherTabArbreHuffman>

    triArbre(arbreHuffman, nbrCaractereDifferent);
 800093e:	4b40      	ldr	r3, [pc, #256]	@ (8000a40 <main+0x19c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4619      	mov	r1, r3
 8000944:	483d      	ldr	r0, [pc, #244]	@ (8000a3c <main+0x198>)
 8000946:	f7ff fdd3 	bl	80004f0 <triArbre>

    afficherTabArbreHuffman(arbreHuffman, nbrCaractereDifferent);
 800094a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a40 <main+0x19c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4619      	mov	r1, r3
 8000950:	483a      	ldr	r0, [pc, #232]	@ (8000a3c <main+0x198>)
 8000952:	f7ff fe19 	bl	8000588 <afficherTabArbreHuffman>

    racine=creerNoeud(arbreHuffman, &nbrCaractereDifferent);
 8000956:	493a      	ldr	r1, [pc, #232]	@ (8000a40 <main+0x19c>)
 8000958:	4838      	ldr	r0, [pc, #224]	@ (8000a3c <main+0x198>)
 800095a:	f7ff fe77 	bl	800064c <creerNoeud>
 800095e:	4603      	mov	r3, r0
 8000960:	4a38      	ldr	r2, [pc, #224]	@ (8000a44 <main+0x1a0>)
 8000962:	6013      	str	r3, [r2, #0]

    afficherTabArbreHuffman(arbreHuffman, nbrCaractereDifferent);
 8000964:	4b36      	ldr	r3, [pc, #216]	@ (8000a40 <main+0x19c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4834      	ldr	r0, [pc, #208]	@ (8000a3c <main+0x198>)
 800096c:	f7ff fe0c 	bl	8000588 <afficherTabArbreHuffman>

    parcourirArbre(racine);
 8000970:	4b34      	ldr	r3, [pc, #208]	@ (8000a44 <main+0x1a0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff feb3 	bl	80006e0 <parcourirArbre>

    libererMemoireArbre(racine);
 800097a:	4b32      	ldr	r3, [pc, #200]	@ (8000a44 <main+0x1a0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fee0 	bl	8000744 <libererMemoireArbre>

    printf("Codes de Huffman pour chaque caractere :\r\n");
 8000984:	4830      	ldr	r0, [pc, #192]	@ (8000a48 <main+0x1a4>)
 8000986:	f000 fdb7 	bl	80014f8 <puts>
    creerCode(racine, 0, 0);
 800098a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <main+0x1a0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fef0 	bl	8000778 <creerCode>

    uint32_t tailleCompress = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
    compresserTexte(texte, racine, texteCompress, &tailleCompress);
 800099c:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <main+0x1a0>)
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a4c <main+0x1a8>)
 80009a4:	4823      	ldr	r0, [pc, #140]	@ (8000a34 <main+0x190>)
 80009a6:	f000 f907 	bl	8000bb8 <compresserTexte>
    creerEntete(arbreHuffman, &entete, tailleCompress, nbrCaractereTotal);
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <main+0x18c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4927      	ldr	r1, [pc, #156]	@ (8000a50 <main+0x1ac>)
 80009b2:	4822      	ldr	r0, [pc, #136]	@ (8000a3c <main+0x198>)
 80009b4:	f000 f962 	bl	8000c7c <creerEntete>
    printf("En-tete : Taille = %d, Fichier compresse = %d, Nombre de caracteres = %x\r\n",
           entete.tailleEntete, entete.tailleCompress, entete.donnees);
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <main+0x1ac>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
    printf("En-tete : Taille = %d, Fichier compresse = %d, Nombre de caracteres = %x\r\n",
 80009bc:	4619      	mov	r1, r3
           entete.tailleEntete, entete.tailleCompress, entete.donnees);
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <main+0x1ac>)
 80009c0:	885b      	ldrh	r3, [r3, #2]
    printf("En-tete : Taille = %d, Fichier compresse = %d, Nombre de caracteres = %x\r\n",
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <main+0x1b0>)
 80009c6:	4824      	ldr	r0, [pc, #144]	@ (8000a58 <main+0x1b4>)
 80009c8:	f000 fd2e 	bl	8001428 <iprintf>

    for (int i = 0; i < tailleCompress; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e00a      	b.n	80009e8 <main+0x144>
        printf("0x%02x ", texteCompress[i]);
 80009d2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a4c <main+0x1a8>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	481f      	ldr	r0, [pc, #124]	@ (8000a5c <main+0x1b8>)
 80009de:	f000 fd23 	bl	8001428 <iprintf>
    for (int i = 0; i < tailleCompress; i++) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3f0      	bcc.n	80009d2 <main+0x12e>
    }
    printf("\r\n");
 80009f0:	481b      	ldr	r0, [pc, #108]	@ (8000a60 <main+0x1bc>)
 80009f2:	f000 fd81 	bl	80014f8 <puts>

    compresserTexteEnBinaire(texte, racine, texteCompressBinaire);
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <main+0x1a0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000a64 <main+0x1c0>)
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <main+0x190>)
 8000a00:	f000 f9b4 	bl	8000d6c <compresserTexteEnBinaire>

    printf("Texte compresse en binaire : %s\n", texteCompressBinaire);
 8000a04:	4917      	ldr	r1, [pc, #92]	@ (8000a64 <main+0x1c0>)
 8000a06:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <main+0x1c4>)
 8000a08:	f000 fd0e 	bl	8001428 <iprintf>
   // afficherFeuilles(arbreHuffman);
	while(1){
		for(uint32_t i = 0 ; i<100000; i++);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e002      	b.n	8000a18 <main+0x174>
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <main+0x1c8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d9f8      	bls.n	8000a12 <main+0x16e>
		SYSTICK_Delay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a24:	f000 fa52 	bl	8000ecc <SYSTICK_Delay>
		for(uint32_t i = 0 ; i<100000; i++);
 8000a28:	e7f0      	b.n	8000a0c <main+0x168>
 8000a2a:	bf00      	nop
 8000a2c:	20001c24 	.word	0x20001c24
 8000a30:	20000c80 	.word	0x20000c80
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000680 	.word	0x20000680
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	20000a80 	.word	0x20000a80
 8000a44:	20000488 	.word	0x20000488
 8000a48:	080022ac 	.word	0x080022ac
 8000a4c:	2000048c 	.word	0x2000048c
 8000a50:	20000a84 	.word	0x20000a84
 8000a54:	20000a8a 	.word	0x20000a8a
 8000a58:	080022d8 	.word	0x080022d8
 8000a5c:	08002324 	.word	0x08002324
 8000a60:	0800232c 	.word	0x0800232c
 8000a64:	20000c84 	.word	0x20000c84
 8000a68:	08002330 	.word	0x08002330
 8000a6c:	0001869f 	.word	0x0001869f

08000a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a82:	f000 fb1f 	bl	80010c4 <__io_getchar>
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
	}

return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 faef 	bl	80010a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
	}
	return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f000 fe0e 	bl	800179c <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20001c28 	.word	0x20001c28
 8000bb4:	20001d80 	.word	0x20001d80

08000bb8 <compresserTexte>:
#include "text_comp_decomp.h"




void compresserTexte(uint8_t* texte, struct noeud* racine, uint8_t* texteCompress, uint32_t* tailleCompress) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	603b      	str	r3, [r7, #0]
    *tailleCompress = 0;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
    uint32_t positionBit = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 0; texte[i] != '\0'; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	e042      	b.n	8000c5c <compresserTexte+0xa4>
        struct noeud* noeudChar = getAddress(racine, texte[i]);
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	68b8      	ldr	r0, [r7, #8]
 8000be2:	f7ff fe1d 	bl	8000820 <getAddress>
 8000be6:	61b8      	str	r0, [r7, #24]

        if (noeudChar == NULL) {
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d108      	bne.n	8000c00 <compresserTexte+0x48>
            printf("Erreur : caractere '%c' non trouve dans l'arbre de Huffman\r\n", texte[i]);
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481f      	ldr	r0, [pc, #124]	@ (8000c78 <compresserTexte+0xc0>)
 8000bfa:	f000 fc15 	bl	8001428 <iprintf>
            return;
 8000bfe:	e038      	b.n	8000c72 <compresserTexte+0xba>
        }

        // Parcours de chaque bit du code de Huffman pour le caract√®re
        for (int j = noeudChar->tailleCode - 1; j >= 0; j--) {
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	e022      	b.n	8000c50 <compresserTexte+0x98>
            // D√©cale le code pour extraire le bit le plus significatif
            uint8_t bit = (noeudChar->code >> j) & 1;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]

            // Ajoute le bit au bon emplacement dans texteCompress
            texteCompress[positionBit / 8] |= (bit << (7 - (positionBit % 8)));
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	441a      	add	r2, r3
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	b251      	sxtb	r1, r2
 8000c28:	7df8      	ldrb	r0, [r7, #23]
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	f002 0207 	and.w	r2, r2, #7
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	b252      	sxtb	r2, r2
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	b251      	sxtb	r1, r2
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
            positionBit++;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	3301      	adds	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int j = noeudChar->tailleCode - 1; j >= 0; j--) {
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dad9      	bge.n	8000c0a <compresserTexte+0x52>
    for (int i = 0; texte[i] != '\0'; i++) {
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1b6      	bne.n	8000bd6 <compresserTexte+0x1e>
        }
    }
    *tailleCompress = (positionBit + 7) / 8;
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	3307      	adds	r3, #7
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	08002354 	.word	0x08002354

08000c7c <creerEntete>:

// Fonction pour cr√©er l'en-t√™te
void creerEntete(struct noeud* arbre[256], struct Entete* entete, uint32_t tailleCompress, uint32_t nbrCaractereTotal) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]
    entete->tailleCompress = tailleCompress;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	805a      	strh	r2, [r3, #2]
    entete->nbrCaractereTotal = nbrCaractereTotal;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	809a      	strh	r2, [r3, #4]
    int pos = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]

    // Ajouter chaque caract√®re avec son code Huffman et sa taille dans l'en-t√™te
    for (int i = 0; i < 256; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	e055      	b.n	8000d50 <creerEntete+0xd4>
        if (arbre[i] != NULL) {
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d04b      	beq.n	8000d4a <creerEntete+0xce>
            entete->donnees[pos++] = arbre[i]->c;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	1c59      	adds	r1, r3, #1
 8000cc0:	61f9      	str	r1, [r7, #28]
 8000cc2:	7811      	ldrb	r1, [r2, #0]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	460a      	mov	r2, r1
 8000cca:	719a      	strb	r2, [r3, #6]
            entete->donnees[pos++] = arbre[i]->tailleCode;
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68d9      	ldr	r1, [r3, #12]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	61fa      	str	r2, [r7, #28]
 8000cde:	b2c9      	uxtb	r1, r1
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	719a      	strb	r2, [r3, #6]

            // Stocke chaque bit du code dans l'en-t√™te
            for (int j = arbre[i]->tailleCode - 1; j >= 0; j--) {
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e021      	b.n	8000d3e <creerEntete+0xc2>
                uint8_t bit = (arbre[i]->code >> j) & 1;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	74fb      	strb	r3, [r7, #19]
                entete->donnees[pos] = (entete->donnees[pos] << 1) | bit;
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	4413      	add	r3, r2
 8000d1a:	3306      	adds	r3, #6
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	b25a      	sxtb	r2, r3
 8000d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	b2d9      	uxtb	r1, r3
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	3306      	adds	r3, #6
 8000d34:	460a      	mov	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
            for (int j = arbre[i]->tailleCode - 1; j >= 0; j--) {
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dada      	bge.n	8000cfa <creerEntete+0x7e>
            }
            pos++;
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 256; i++) {
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	@ 0xff
 8000d54:	dda6      	ble.n	8000ca4 <creerEntete+0x28>
        }
    }
    entete->tailleEntete = pos;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	801a      	strh	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <compresserTexteEnBinaire>:


void compresserTexteEnBinaire(uint8_t* texte, struct noeud* racine, char* texteCompressBinaire) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
    texteCompressBinaire[0] = '\0';
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]

    for (int i = 0; texte[i] != '\0'; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e036      	b.n	8000df2 <compresserTexteEnBinaire+0x86>
        struct noeud* noeudChar = getAddress(racine, texte[i]);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f7ff fd46 	bl	8000820 <getAddress>
 8000d94:	6178      	str	r0, [r7, #20]

        if (noeudChar == NULL) {
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d108      	bne.n	8000dae <compresserTexteEnBinaire+0x42>
            printf("Erreur : caractere '%c' non trouve dans l'arbre de Huffman\r\n", texte[i]);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4817      	ldr	r0, [pc, #92]	@ (8000e04 <compresserTexteEnBinaire+0x98>)
 8000da8:	f000 fb3e 	bl	8001428 <iprintf>
            return;
 8000dac:	e027      	b.n	8000dfe <compresserTexteEnBinaire+0x92>
        }

        for (int j = noeudChar->tailleCode - 1; j >= 0; j--) {
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	e016      	b.n	8000de6 <compresserTexteEnBinaire+0x7a>
            uint8_t bit = (noeudChar->code >> j) & 1;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	74fb      	strb	r3, [r7, #19]
            strncat(texteCompressBinaire, bit ? "1" : "0", 1); // Ajoute '1' ou '0' √† la cha√Æne
 8000dca:	7cfb      	ldrb	r3, [r7, #19]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <compresserTexteEnBinaire+0x68>
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <compresserTexteEnBinaire+0x9c>)
 8000dd2:	e000      	b.n	8000dd6 <compresserTexteEnBinaire+0x6a>
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <compresserTexteEnBinaire+0xa0>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fc74 	bl	80016c8 <strncat>
        for (int j = noeudChar->tailleCode - 1; j >= 0; j--) {
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dae5      	bge.n	8000db8 <compresserTexteEnBinaire+0x4c>
    for (int i = 0; texte[i] != '\0'; i++) {
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	3301      	adds	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1c2      	bne.n	8000d84 <compresserTexteEnBinaire+0x18>
        }
    }
}
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08002354 	.word	0x08002354
 8000e08:	08002394 	.word	0x08002394
 8000e0c:	08002398 	.word	0x08002398

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ffc2 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <SYSTICK_Init+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <SYSTICK_Init+0x20>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	099b      	lsrs	r3, r3, #6
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ffd3 	bl	8000e64 <SysTick_Config>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	10624dd3 	.word	0x10624dd3

08000ecc <SYSTICK_Delay>:
/**
 * Millisecond delays with Systick Timer, blocking function
 * @param delay : milliseconds to wait
 */
void SYSTICK_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	  uint32_t tickstart = SYSTICK_Get();
 8000ed4:	f000 f810 	bl	8000ef8 <SYSTICK_Get>
 8000ed8:	60f8      	str	r0, [r7, #12]

	  while((SYSTICK_Get() - tickstart) < Delay);
 8000eda:	bf00      	nop
 8000edc:	f000 f80c 	bl	8000ef8 <SYSTICK_Get>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <SYSTICK_Delay+0x10>
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <SYSTICK_Get>:

uint32_t SYSTICK_Get(void){
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return ticks;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <SYSTICK_Get+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20001c2c 	.word	0x20001c2c

08000f10 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <USART2_Init+0x68>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <USART2_Init+0x68>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <USART2_Init+0x6c>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <USART2_Init+0x6c>)
 8000f26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f2a:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <USART2_Init+0x70>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <USART2_Init+0x70>)
 8000f32:	f043 0320 	orr.w	r3, r3, #32
 8000f36:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <USART2_Init+0x70>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <USART2_Init+0x70>)
 8000f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f42:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <USART2_Init+0x70>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <USART2_Init+0x70>)
 8000f4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f4e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <USART2_Init+0x70>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <USART2_Init+0x70>)
 8000f56:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000f5a:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <USART2_Init+0x6c>)
 8000f5e:	228b      	movs	r2, #139	@ 0x8b
 8000f60:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <USART2_Init+0x6c>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <USART2_Init+0x6c>)
 8000f68:	f043 030c 	orr.w	r3, r3, #12
 8000f6c:	60d3      	str	r3, [r2, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	40020000 	.word	0x40020000

08000f84 <USART1_Init>:

void USART1_Init(void){
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;			// ABP1
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <USART1_Init+0x68>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <USART1_Init+0x68>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6453      	str	r3, [r2, #68]	@ 0x44
	USART1->CR1 |= USART_CR1_UE;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <USART1_Init+0x6c>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a15      	ldr	r2, [pc, #84]	@ (8000ff0 <USART1_Init+0x6c>)
 8000f9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f9e:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<18;					// PA9
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <USART1_Init+0x70>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a13      	ldr	r2, [pc, #76]	@ (8000ff4 <USART1_Init+0x70>)
 8000fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000faa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<20;					// PA10
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <USART1_Init+0x70>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <USART1_Init+0x70>)
 8000fb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= 7<<4;							// USART1
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <USART1_Init+0x70>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <USART1_Init+0x70>)
 8000fbe:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000fc2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= 7<<8;							// USART1
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <USART1_Init+0x70>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <USART1_Init+0x70>)
 8000fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fce:	6253      	str	r3, [r2, #36]	@ 0x24
	USART1->BRR  = 139;								// 115200 - APB1:16Mhz
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <USART1_Init+0x6c>)
 8000fd2:	228b      	movs	r2, #139	@ 0x8b
 8000fd4:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <USART1_Init+0x6c>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <USART1_Init+0x6c>)
 8000fdc:	f043 030c 	orr.w	r3, r3, #12
 8000fe0:	60d3      	str	r3, [r2, #12]

}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <USART2_TransmitChar+0x2c>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8001008:	bf00      	nop
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <USART2_TransmitChar+0x2c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f9      	beq.n	800100a <USART2_TransmitChar+0x12>
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40004400 	.word	0x40004400

08001028 <USART1_TransmitChar>:

void USART1_TransmitChar(uint8_t data){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	USART1->DR = data;
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <USART1_TransmitChar+0x2c>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	6053      	str	r3, [r2, #4]
	while( (USART1->SR & USART_SR_TXE)==0 );
 8001038:	bf00      	nop
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <USART1_TransmitChar+0x2c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <USART1_TransmitChar+0x12>
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40011000 	.word	0x40011000

08001058 <USART2_ReceiveChar>:

uint8_t USART2_ReceiveChar(void){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 800105c:	bf00      	nop
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <USART2_ReceiveChar+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f9      	beq.n	800105e <USART2_ReceiveChar+0x6>
	return USART2->DR;
 800106a:	4b04      	ldr	r3, [pc, #16]	@ (800107c <USART2_ReceiveChar+0x24>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	b2db      	uxtb	r3, r3

}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40004400 	.word	0x40004400

08001080 <USART1_ReceiveChar>:
uint8_t USART1_ReceiveChar(void){
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	while(!(USART1->SR & USART_SR_RXNE));
 8001084:	bf00      	nop
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <USART1_ReceiveChar+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f9      	beq.n	8001086 <USART1_ReceiveChar+0x6>
	return USART1->DR;
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <USART1_ReceiveChar+0x24>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	b2db      	uxtb	r3, r3

}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40011000 	.word	0x40011000

080010a8 <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff9f 	bl	8000ff8 <USART2_TransmitChar>
	return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 80010c8:	f7ff ffc6 	bl	8001058 <USART2_ReceiveChar>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001102:	f000 fb51 	bl	80017a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff fbcd 	bl	80008a4 <main>

0800110a <LoopForever>:

LoopForever:
  b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800110c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001118:	080023e0 	.word	0x080023e0
  ldr r2, =_sbss
 800111c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001120:	20001d7c 	.word	0x20001d7c

08001124 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <malloc>:
 8001128:	4b02      	ldr	r3, [pc, #8]	@ (8001134 <malloc+0xc>)
 800112a:	4601      	mov	r1, r0
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f000 b82d 	b.w	800118c <_malloc_r>
 8001132:	bf00      	nop
 8001134:	2000001c 	.word	0x2000001c

08001138 <free>:
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <free+0xc>)
 800113a:	4601      	mov	r1, r0
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f000 bb5b 	b.w	80017f8 <_free_r>
 8001142:	bf00      	nop
 8001144:	2000001c 	.word	0x2000001c

08001148 <sbrk_aligned>:
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	4e0f      	ldr	r6, [pc, #60]	@ (8001188 <sbrk_aligned+0x40>)
 800114c:	460c      	mov	r4, r1
 800114e:	6831      	ldr	r1, [r6, #0]
 8001150:	4605      	mov	r5, r0
 8001152:	b911      	cbnz	r1, 800115a <sbrk_aligned+0x12>
 8001154:	f000 fb00 	bl	8001758 <_sbrk_r>
 8001158:	6030      	str	r0, [r6, #0]
 800115a:	4621      	mov	r1, r4
 800115c:	4628      	mov	r0, r5
 800115e:	f000 fafb 	bl	8001758 <_sbrk_r>
 8001162:	1c43      	adds	r3, r0, #1
 8001164:	d103      	bne.n	800116e <sbrk_aligned+0x26>
 8001166:	f04f 34ff 	mov.w	r4, #4294967295
 800116a:	4620      	mov	r0, r4
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	1cc4      	adds	r4, r0, #3
 8001170:	f024 0403 	bic.w	r4, r4, #3
 8001174:	42a0      	cmp	r0, r4
 8001176:	d0f8      	beq.n	800116a <sbrk_aligned+0x22>
 8001178:	1a21      	subs	r1, r4, r0
 800117a:	4628      	mov	r0, r5
 800117c:	f000 faec 	bl	8001758 <_sbrk_r>
 8001180:	3001      	adds	r0, #1
 8001182:	d1f2      	bne.n	800116a <sbrk_aligned+0x22>
 8001184:	e7ef      	b.n	8001166 <sbrk_aligned+0x1e>
 8001186:	bf00      	nop
 8001188:	20001c30 	.word	0x20001c30

0800118c <_malloc_r>:
 800118c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001190:	1ccd      	adds	r5, r1, #3
 8001192:	f025 0503 	bic.w	r5, r5, #3
 8001196:	3508      	adds	r5, #8
 8001198:	2d0c      	cmp	r5, #12
 800119a:	bf38      	it	cc
 800119c:	250c      	movcc	r5, #12
 800119e:	2d00      	cmp	r5, #0
 80011a0:	4606      	mov	r6, r0
 80011a2:	db01      	blt.n	80011a8 <_malloc_r+0x1c>
 80011a4:	42a9      	cmp	r1, r5
 80011a6:	d904      	bls.n	80011b2 <_malloc_r+0x26>
 80011a8:	230c      	movs	r3, #12
 80011aa:	6033      	str	r3, [r6, #0]
 80011ac:	2000      	movs	r0, #0
 80011ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001288 <_malloc_r+0xfc>
 80011b6:	f000 f869 	bl	800128c <__malloc_lock>
 80011ba:	f8d8 3000 	ldr.w	r3, [r8]
 80011be:	461c      	mov	r4, r3
 80011c0:	bb44      	cbnz	r4, 8001214 <_malloc_r+0x88>
 80011c2:	4629      	mov	r1, r5
 80011c4:	4630      	mov	r0, r6
 80011c6:	f7ff ffbf 	bl	8001148 <sbrk_aligned>
 80011ca:	1c43      	adds	r3, r0, #1
 80011cc:	4604      	mov	r4, r0
 80011ce:	d158      	bne.n	8001282 <_malloc_r+0xf6>
 80011d0:	f8d8 4000 	ldr.w	r4, [r8]
 80011d4:	4627      	mov	r7, r4
 80011d6:	2f00      	cmp	r7, #0
 80011d8:	d143      	bne.n	8001262 <_malloc_r+0xd6>
 80011da:	2c00      	cmp	r4, #0
 80011dc:	d04b      	beq.n	8001276 <_malloc_r+0xea>
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	4639      	mov	r1, r7
 80011e2:	4630      	mov	r0, r6
 80011e4:	eb04 0903 	add.w	r9, r4, r3
 80011e8:	f000 fab6 	bl	8001758 <_sbrk_r>
 80011ec:	4581      	cmp	r9, r0
 80011ee:	d142      	bne.n	8001276 <_malloc_r+0xea>
 80011f0:	6821      	ldr	r1, [r4, #0]
 80011f2:	1a6d      	subs	r5, r5, r1
 80011f4:	4629      	mov	r1, r5
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff ffa6 	bl	8001148 <sbrk_aligned>
 80011fc:	3001      	adds	r0, #1
 80011fe:	d03a      	beq.n	8001276 <_malloc_r+0xea>
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	442b      	add	r3, r5
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	f8d8 3000 	ldr.w	r3, [r8]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	bb62      	cbnz	r2, 8001268 <_malloc_r+0xdc>
 800120e:	f8c8 7000 	str.w	r7, [r8]
 8001212:	e00f      	b.n	8001234 <_malloc_r+0xa8>
 8001214:	6822      	ldr	r2, [r4, #0]
 8001216:	1b52      	subs	r2, r2, r5
 8001218:	d420      	bmi.n	800125c <_malloc_r+0xd0>
 800121a:	2a0b      	cmp	r2, #11
 800121c:	d917      	bls.n	800124e <_malloc_r+0xc2>
 800121e:	1961      	adds	r1, r4, r5
 8001220:	42a3      	cmp	r3, r4
 8001222:	6025      	str	r5, [r4, #0]
 8001224:	bf18      	it	ne
 8001226:	6059      	strne	r1, [r3, #4]
 8001228:	6863      	ldr	r3, [r4, #4]
 800122a:	bf08      	it	eq
 800122c:	f8c8 1000 	streq.w	r1, [r8]
 8001230:	5162      	str	r2, [r4, r5]
 8001232:	604b      	str	r3, [r1, #4]
 8001234:	4630      	mov	r0, r6
 8001236:	f000 f82f 	bl	8001298 <__malloc_unlock>
 800123a:	f104 000b 	add.w	r0, r4, #11
 800123e:	1d23      	adds	r3, r4, #4
 8001240:	f020 0007 	bic.w	r0, r0, #7
 8001244:	1ac2      	subs	r2, r0, r3
 8001246:	bf1c      	itt	ne
 8001248:	1a1b      	subne	r3, r3, r0
 800124a:	50a3      	strne	r3, [r4, r2]
 800124c:	e7af      	b.n	80011ae <_malloc_r+0x22>
 800124e:	6862      	ldr	r2, [r4, #4]
 8001250:	42a3      	cmp	r3, r4
 8001252:	bf0c      	ite	eq
 8001254:	f8c8 2000 	streq.w	r2, [r8]
 8001258:	605a      	strne	r2, [r3, #4]
 800125a:	e7eb      	b.n	8001234 <_malloc_r+0xa8>
 800125c:	4623      	mov	r3, r4
 800125e:	6864      	ldr	r4, [r4, #4]
 8001260:	e7ae      	b.n	80011c0 <_malloc_r+0x34>
 8001262:	463c      	mov	r4, r7
 8001264:	687f      	ldr	r7, [r7, #4]
 8001266:	e7b6      	b.n	80011d6 <_malloc_r+0x4a>
 8001268:	461a      	mov	r2, r3
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	42a3      	cmp	r3, r4
 800126e:	d1fb      	bne.n	8001268 <_malloc_r+0xdc>
 8001270:	2300      	movs	r3, #0
 8001272:	6053      	str	r3, [r2, #4]
 8001274:	e7de      	b.n	8001234 <_malloc_r+0xa8>
 8001276:	230c      	movs	r3, #12
 8001278:	6033      	str	r3, [r6, #0]
 800127a:	4630      	mov	r0, r6
 800127c:	f000 f80c 	bl	8001298 <__malloc_unlock>
 8001280:	e794      	b.n	80011ac <_malloc_r+0x20>
 8001282:	6005      	str	r5, [r0, #0]
 8001284:	e7d6      	b.n	8001234 <_malloc_r+0xa8>
 8001286:	bf00      	nop
 8001288:	20001c34 	.word	0x20001c34

0800128c <__malloc_lock>:
 800128c:	4801      	ldr	r0, [pc, #4]	@ (8001294 <__malloc_lock+0x8>)
 800128e:	f000 bab0 	b.w	80017f2 <__retarget_lock_acquire_recursive>
 8001292:	bf00      	nop
 8001294:	20001d78 	.word	0x20001d78

08001298 <__malloc_unlock>:
 8001298:	4801      	ldr	r0, [pc, #4]	@ (80012a0 <__malloc_unlock+0x8>)
 800129a:	f000 baab 	b.w	80017f4 <__retarget_lock_release_recursive>
 800129e:	bf00      	nop
 80012a0:	20001d78 	.word	0x20001d78

080012a4 <std>:
 80012a4:	2300      	movs	r3, #0
 80012a6:	b510      	push	{r4, lr}
 80012a8:	4604      	mov	r4, r0
 80012aa:	e9c0 3300 	strd	r3, r3, [r0]
 80012ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012b2:	6083      	str	r3, [r0, #8]
 80012b4:	8181      	strh	r1, [r0, #12]
 80012b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80012b8:	81c2      	strh	r2, [r0, #14]
 80012ba:	6183      	str	r3, [r0, #24]
 80012bc:	4619      	mov	r1, r3
 80012be:	2208      	movs	r2, #8
 80012c0:	305c      	adds	r0, #92	@ 0x5c
 80012c2:	f000 f9f9 	bl	80016b8 <memset>
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <std+0x58>)
 80012c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <std+0x5c>)
 80012cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <std+0x60>)
 80012d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <std+0x64>)
 80012d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <std+0x68>)
 80012d8:	6224      	str	r4, [r4, #32]
 80012da:	429c      	cmp	r4, r3
 80012dc:	d006      	beq.n	80012ec <std+0x48>
 80012de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80012e2:	4294      	cmp	r4, r2
 80012e4:	d002      	beq.n	80012ec <std+0x48>
 80012e6:	33d0      	adds	r3, #208	@ 0xd0
 80012e8:	429c      	cmp	r4, r3
 80012ea:	d105      	bne.n	80012f8 <std+0x54>
 80012ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80012f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012f4:	f000 ba7c 	b.w	80017f0 <__retarget_lock_init_recursive>
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop
 80012fc:	08001509 	.word	0x08001509
 8001300:	0800152b 	.word	0x0800152b
 8001304:	08001563 	.word	0x08001563
 8001308:	08001587 	.word	0x08001587
 800130c:	20001c38 	.word	0x20001c38

08001310 <stdio_exit_handler>:
 8001310:	4a02      	ldr	r2, [pc, #8]	@ (800131c <stdio_exit_handler+0xc>)
 8001312:	4903      	ldr	r1, [pc, #12]	@ (8001320 <stdio_exit_handler+0x10>)
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <stdio_exit_handler+0x14>)
 8001316:	f000 b869 	b.w	80013ec <_fwalk_sglue>
 800131a:	bf00      	nop
 800131c:	20000010 	.word	0x20000010
 8001320:	08001f35 	.word	0x08001f35
 8001324:	20000020 	.word	0x20000020

08001328 <cleanup_stdio>:
 8001328:	6841      	ldr	r1, [r0, #4]
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <cleanup_stdio+0x34>)
 800132c:	4299      	cmp	r1, r3
 800132e:	b510      	push	{r4, lr}
 8001330:	4604      	mov	r4, r0
 8001332:	d001      	beq.n	8001338 <cleanup_stdio+0x10>
 8001334:	f000 fdfe 	bl	8001f34 <_fflush_r>
 8001338:	68a1      	ldr	r1, [r4, #8]
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <cleanup_stdio+0x38>)
 800133c:	4299      	cmp	r1, r3
 800133e:	d002      	beq.n	8001346 <cleanup_stdio+0x1e>
 8001340:	4620      	mov	r0, r4
 8001342:	f000 fdf7 	bl	8001f34 <_fflush_r>
 8001346:	68e1      	ldr	r1, [r4, #12]
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <cleanup_stdio+0x3c>)
 800134a:	4299      	cmp	r1, r3
 800134c:	d004      	beq.n	8001358 <cleanup_stdio+0x30>
 800134e:	4620      	mov	r0, r4
 8001350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001354:	f000 bdee 	b.w	8001f34 <_fflush_r>
 8001358:	bd10      	pop	{r4, pc}
 800135a:	bf00      	nop
 800135c:	20001c38 	.word	0x20001c38
 8001360:	20001ca0 	.word	0x20001ca0
 8001364:	20001d08 	.word	0x20001d08

08001368 <global_stdio_init.part.0>:
 8001368:	b510      	push	{r4, lr}
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <global_stdio_init.part.0+0x30>)
 800136c:	4c0b      	ldr	r4, [pc, #44]	@ (800139c <global_stdio_init.part.0+0x34>)
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <global_stdio_init.part.0+0x38>)
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	4620      	mov	r0, r4
 8001374:	2200      	movs	r2, #0
 8001376:	2104      	movs	r1, #4
 8001378:	f7ff ff94 	bl	80012a4 <std>
 800137c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001380:	2201      	movs	r2, #1
 8001382:	2109      	movs	r1, #9
 8001384:	f7ff ff8e 	bl	80012a4 <std>
 8001388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800138c:	2202      	movs	r2, #2
 800138e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001392:	2112      	movs	r1, #18
 8001394:	f7ff bf86 	b.w	80012a4 <std>
 8001398:	20001d70 	.word	0x20001d70
 800139c:	20001c38 	.word	0x20001c38
 80013a0:	08001311 	.word	0x08001311

080013a4 <__sfp_lock_acquire>:
 80013a4:	4801      	ldr	r0, [pc, #4]	@ (80013ac <__sfp_lock_acquire+0x8>)
 80013a6:	f000 ba24 	b.w	80017f2 <__retarget_lock_acquire_recursive>
 80013aa:	bf00      	nop
 80013ac:	20001d79 	.word	0x20001d79

080013b0 <__sfp_lock_release>:
 80013b0:	4801      	ldr	r0, [pc, #4]	@ (80013b8 <__sfp_lock_release+0x8>)
 80013b2:	f000 ba1f 	b.w	80017f4 <__retarget_lock_release_recursive>
 80013b6:	bf00      	nop
 80013b8:	20001d79 	.word	0x20001d79

080013bc <__sinit>:
 80013bc:	b510      	push	{r4, lr}
 80013be:	4604      	mov	r4, r0
 80013c0:	f7ff fff0 	bl	80013a4 <__sfp_lock_acquire>
 80013c4:	6a23      	ldr	r3, [r4, #32]
 80013c6:	b11b      	cbz	r3, 80013d0 <__sinit+0x14>
 80013c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013cc:	f7ff bff0 	b.w	80013b0 <__sfp_lock_release>
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <__sinit+0x28>)
 80013d2:	6223      	str	r3, [r4, #32]
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <__sinit+0x2c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f5      	bne.n	80013c8 <__sinit+0xc>
 80013dc:	f7ff ffc4 	bl	8001368 <global_stdio_init.part.0>
 80013e0:	e7f2      	b.n	80013c8 <__sinit+0xc>
 80013e2:	bf00      	nop
 80013e4:	08001329 	.word	0x08001329
 80013e8:	20001d70 	.word	0x20001d70

080013ec <_fwalk_sglue>:
 80013ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f0:	4607      	mov	r7, r0
 80013f2:	4688      	mov	r8, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	2600      	movs	r6, #0
 80013f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013fc:	f1b9 0901 	subs.w	r9, r9, #1
 8001400:	d505      	bpl.n	800140e <_fwalk_sglue+0x22>
 8001402:	6824      	ldr	r4, [r4, #0]
 8001404:	2c00      	cmp	r4, #0
 8001406:	d1f7      	bne.n	80013f8 <_fwalk_sglue+0xc>
 8001408:	4630      	mov	r0, r6
 800140a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800140e:	89ab      	ldrh	r3, [r5, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d907      	bls.n	8001424 <_fwalk_sglue+0x38>
 8001414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001418:	3301      	adds	r3, #1
 800141a:	d003      	beq.n	8001424 <_fwalk_sglue+0x38>
 800141c:	4629      	mov	r1, r5
 800141e:	4638      	mov	r0, r7
 8001420:	47c0      	blx	r8
 8001422:	4306      	orrs	r6, r0
 8001424:	3568      	adds	r5, #104	@ 0x68
 8001426:	e7e9      	b.n	80013fc <_fwalk_sglue+0x10>

08001428 <iprintf>:
 8001428:	b40f      	push	{r0, r1, r2, r3}
 800142a:	b507      	push	{r0, r1, r2, lr}
 800142c:	4906      	ldr	r1, [pc, #24]	@ (8001448 <iprintf+0x20>)
 800142e:	ab04      	add	r3, sp, #16
 8001430:	6808      	ldr	r0, [r1, #0]
 8001432:	f853 2b04 	ldr.w	r2, [r3], #4
 8001436:	6881      	ldr	r1, [r0, #8]
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f000 fa51 	bl	80018e0 <_vfiprintf_r>
 800143e:	b003      	add	sp, #12
 8001440:	f85d eb04 	ldr.w	lr, [sp], #4
 8001444:	b004      	add	sp, #16
 8001446:	4770      	bx	lr
 8001448:	2000001c 	.word	0x2000001c

0800144c <_puts_r>:
 800144c:	6a03      	ldr	r3, [r0, #32]
 800144e:	b570      	push	{r4, r5, r6, lr}
 8001450:	6884      	ldr	r4, [r0, #8]
 8001452:	4605      	mov	r5, r0
 8001454:	460e      	mov	r6, r1
 8001456:	b90b      	cbnz	r3, 800145c <_puts_r+0x10>
 8001458:	f7ff ffb0 	bl	80013bc <__sinit>
 800145c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800145e:	07db      	lsls	r3, r3, #31
 8001460:	d405      	bmi.n	800146e <_puts_r+0x22>
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	0598      	lsls	r0, r3, #22
 8001466:	d402      	bmi.n	800146e <_puts_r+0x22>
 8001468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800146a:	f000 f9c2 	bl	80017f2 <__retarget_lock_acquire_recursive>
 800146e:	89a3      	ldrh	r3, [r4, #12]
 8001470:	0719      	lsls	r1, r3, #28
 8001472:	d502      	bpl.n	800147a <_puts_r+0x2e>
 8001474:	6923      	ldr	r3, [r4, #16]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d135      	bne.n	80014e6 <_puts_r+0x9a>
 800147a:	4621      	mov	r1, r4
 800147c:	4628      	mov	r0, r5
 800147e:	f000 f8c5 	bl	800160c <__swsetup_r>
 8001482:	b380      	cbz	r0, 80014e6 <_puts_r+0x9a>
 8001484:	f04f 35ff 	mov.w	r5, #4294967295
 8001488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800148a:	07da      	lsls	r2, r3, #31
 800148c:	d405      	bmi.n	800149a <_puts_r+0x4e>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	059b      	lsls	r3, r3, #22
 8001492:	d402      	bmi.n	800149a <_puts_r+0x4e>
 8001494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001496:	f000 f9ad 	bl	80017f4 <__retarget_lock_release_recursive>
 800149a:	4628      	mov	r0, r5
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da04      	bge.n	80014ac <_puts_r+0x60>
 80014a2:	69a2      	ldr	r2, [r4, #24]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dc17      	bgt.n	80014d8 <_puts_r+0x8c>
 80014a8:	290a      	cmp	r1, #10
 80014aa:	d015      	beq.n	80014d8 <_puts_r+0x8c>
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	6022      	str	r2, [r4, #0]
 80014b2:	7019      	strb	r1, [r3, #0]
 80014b4:	68a3      	ldr	r3, [r4, #8]
 80014b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60a3      	str	r3, [r4, #8]
 80014be:	2900      	cmp	r1, #0
 80014c0:	d1ed      	bne.n	800149e <_puts_r+0x52>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da11      	bge.n	80014ea <_puts_r+0x9e>
 80014c6:	4622      	mov	r2, r4
 80014c8:	210a      	movs	r1, #10
 80014ca:	4628      	mov	r0, r5
 80014cc:	f000 f85f 	bl	800158e <__swbuf_r>
 80014d0:	3001      	adds	r0, #1
 80014d2:	d0d7      	beq.n	8001484 <_puts_r+0x38>
 80014d4:	250a      	movs	r5, #10
 80014d6:	e7d7      	b.n	8001488 <_puts_r+0x3c>
 80014d8:	4622      	mov	r2, r4
 80014da:	4628      	mov	r0, r5
 80014dc:	f000 f857 	bl	800158e <__swbuf_r>
 80014e0:	3001      	adds	r0, #1
 80014e2:	d1e7      	bne.n	80014b4 <_puts_r+0x68>
 80014e4:	e7ce      	b.n	8001484 <_puts_r+0x38>
 80014e6:	3e01      	subs	r6, #1
 80014e8:	e7e4      	b.n	80014b4 <_puts_r+0x68>
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	6022      	str	r2, [r4, #0]
 80014f0:	220a      	movs	r2, #10
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e7ee      	b.n	80014d4 <_puts_r+0x88>
	...

080014f8 <puts>:
 80014f8:	4b02      	ldr	r3, [pc, #8]	@ (8001504 <puts+0xc>)
 80014fa:	4601      	mov	r1, r0
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f7ff bfa5 	b.w	800144c <_puts_r>
 8001502:	bf00      	nop
 8001504:	2000001c 	.word	0x2000001c

08001508 <__sread>:
 8001508:	b510      	push	{r4, lr}
 800150a:	460c      	mov	r4, r1
 800150c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001510:	f000 f910 	bl	8001734 <_read_r>
 8001514:	2800      	cmp	r0, #0
 8001516:	bfab      	itete	ge
 8001518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800151a:	89a3      	ldrhlt	r3, [r4, #12]
 800151c:	181b      	addge	r3, r3, r0
 800151e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001522:	bfac      	ite	ge
 8001524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001526:	81a3      	strhlt	r3, [r4, #12]
 8001528:	bd10      	pop	{r4, pc}

0800152a <__swrite>:
 800152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800152e:	461f      	mov	r7, r3
 8001530:	898b      	ldrh	r3, [r1, #12]
 8001532:	05db      	lsls	r3, r3, #23
 8001534:	4605      	mov	r5, r0
 8001536:	460c      	mov	r4, r1
 8001538:	4616      	mov	r6, r2
 800153a:	d505      	bpl.n	8001548 <__swrite+0x1e>
 800153c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001540:	2302      	movs	r3, #2
 8001542:	2200      	movs	r2, #0
 8001544:	f000 f8e4 	bl	8001710 <_lseek_r>
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800154e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001552:	81a3      	strh	r3, [r4, #12]
 8001554:	4632      	mov	r2, r6
 8001556:	463b      	mov	r3, r7
 8001558:	4628      	mov	r0, r5
 800155a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800155e:	f000 b90b 	b.w	8001778 <_write_r>

08001562 <__sseek>:
 8001562:	b510      	push	{r4, lr}
 8001564:	460c      	mov	r4, r1
 8001566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800156a:	f000 f8d1 	bl	8001710 <_lseek_r>
 800156e:	1c43      	adds	r3, r0, #1
 8001570:	89a3      	ldrh	r3, [r4, #12]
 8001572:	bf15      	itete	ne
 8001574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800157a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800157e:	81a3      	strheq	r3, [r4, #12]
 8001580:	bf18      	it	ne
 8001582:	81a3      	strhne	r3, [r4, #12]
 8001584:	bd10      	pop	{r4, pc}

08001586 <__sclose>:
 8001586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800158a:	f000 b8b1 	b.w	80016f0 <_close_r>

0800158e <__swbuf_r>:
 800158e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001590:	460e      	mov	r6, r1
 8001592:	4614      	mov	r4, r2
 8001594:	4605      	mov	r5, r0
 8001596:	b118      	cbz	r0, 80015a0 <__swbuf_r+0x12>
 8001598:	6a03      	ldr	r3, [r0, #32]
 800159a:	b90b      	cbnz	r3, 80015a0 <__swbuf_r+0x12>
 800159c:	f7ff ff0e 	bl	80013bc <__sinit>
 80015a0:	69a3      	ldr	r3, [r4, #24]
 80015a2:	60a3      	str	r3, [r4, #8]
 80015a4:	89a3      	ldrh	r3, [r4, #12]
 80015a6:	071a      	lsls	r2, r3, #28
 80015a8:	d501      	bpl.n	80015ae <__swbuf_r+0x20>
 80015aa:	6923      	ldr	r3, [r4, #16]
 80015ac:	b943      	cbnz	r3, 80015c0 <__swbuf_r+0x32>
 80015ae:	4621      	mov	r1, r4
 80015b0:	4628      	mov	r0, r5
 80015b2:	f000 f82b 	bl	800160c <__swsetup_r>
 80015b6:	b118      	cbz	r0, 80015c0 <__swbuf_r+0x32>
 80015b8:	f04f 37ff 	mov.w	r7, #4294967295
 80015bc:	4638      	mov	r0, r7
 80015be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	6922      	ldr	r2, [r4, #16]
 80015c4:	1a98      	subs	r0, r3, r2
 80015c6:	6963      	ldr	r3, [r4, #20]
 80015c8:	b2f6      	uxtb	r6, r6
 80015ca:	4283      	cmp	r3, r0
 80015cc:	4637      	mov	r7, r6
 80015ce:	dc05      	bgt.n	80015dc <__swbuf_r+0x4e>
 80015d0:	4621      	mov	r1, r4
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 fcae 	bl	8001f34 <_fflush_r>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ed      	bne.n	80015b8 <__swbuf_r+0x2a>
 80015dc:	68a3      	ldr	r3, [r4, #8]
 80015de:	3b01      	subs	r3, #1
 80015e0:	60a3      	str	r3, [r4, #8]
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	6022      	str	r2, [r4, #0]
 80015e8:	701e      	strb	r6, [r3, #0]
 80015ea:	6962      	ldr	r2, [r4, #20]
 80015ec:	1c43      	adds	r3, r0, #1
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d004      	beq.n	80015fc <__swbuf_r+0x6e>
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	07db      	lsls	r3, r3, #31
 80015f6:	d5e1      	bpl.n	80015bc <__swbuf_r+0x2e>
 80015f8:	2e0a      	cmp	r6, #10
 80015fa:	d1df      	bne.n	80015bc <__swbuf_r+0x2e>
 80015fc:	4621      	mov	r1, r4
 80015fe:	4628      	mov	r0, r5
 8001600:	f000 fc98 	bl	8001f34 <_fflush_r>
 8001604:	2800      	cmp	r0, #0
 8001606:	d0d9      	beq.n	80015bc <__swbuf_r+0x2e>
 8001608:	e7d6      	b.n	80015b8 <__swbuf_r+0x2a>
	...

0800160c <__swsetup_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <__swsetup_r+0xa8>)
 8001610:	4605      	mov	r5, r0
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	460c      	mov	r4, r1
 8001616:	b118      	cbz	r0, 8001620 <__swsetup_r+0x14>
 8001618:	6a03      	ldr	r3, [r0, #32]
 800161a:	b90b      	cbnz	r3, 8001620 <__swsetup_r+0x14>
 800161c:	f7ff fece 	bl	80013bc <__sinit>
 8001620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001624:	0719      	lsls	r1, r3, #28
 8001626:	d422      	bmi.n	800166e <__swsetup_r+0x62>
 8001628:	06da      	lsls	r2, r3, #27
 800162a:	d407      	bmi.n	800163c <__swsetup_r+0x30>
 800162c:	2209      	movs	r2, #9
 800162e:	602a      	str	r2, [r5, #0]
 8001630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001634:	81a3      	strh	r3, [r4, #12]
 8001636:	f04f 30ff 	mov.w	r0, #4294967295
 800163a:	e033      	b.n	80016a4 <__swsetup_r+0x98>
 800163c:	0758      	lsls	r0, r3, #29
 800163e:	d512      	bpl.n	8001666 <__swsetup_r+0x5a>
 8001640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001642:	b141      	cbz	r1, 8001656 <__swsetup_r+0x4a>
 8001644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001648:	4299      	cmp	r1, r3
 800164a:	d002      	beq.n	8001652 <__swsetup_r+0x46>
 800164c:	4628      	mov	r0, r5
 800164e:	f000 f8d3 	bl	80017f8 <_free_r>
 8001652:	2300      	movs	r3, #0
 8001654:	6363      	str	r3, [r4, #52]	@ 0x34
 8001656:	89a3      	ldrh	r3, [r4, #12]
 8001658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800165c:	81a3      	strh	r3, [r4, #12]
 800165e:	2300      	movs	r3, #0
 8001660:	6063      	str	r3, [r4, #4]
 8001662:	6923      	ldr	r3, [r4, #16]
 8001664:	6023      	str	r3, [r4, #0]
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	81a3      	strh	r3, [r4, #12]
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	b94b      	cbnz	r3, 8001686 <__swsetup_r+0x7a>
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800167c:	d003      	beq.n	8001686 <__swsetup_r+0x7a>
 800167e:	4621      	mov	r1, r4
 8001680:	4628      	mov	r0, r5
 8001682:	f000 fca5 	bl	8001fd0 <__smakebuf_r>
 8001686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800168a:	f013 0201 	ands.w	r2, r3, #1
 800168e:	d00a      	beq.n	80016a6 <__swsetup_r+0x9a>
 8001690:	2200      	movs	r2, #0
 8001692:	60a2      	str	r2, [r4, #8]
 8001694:	6962      	ldr	r2, [r4, #20]
 8001696:	4252      	negs	r2, r2
 8001698:	61a2      	str	r2, [r4, #24]
 800169a:	6922      	ldr	r2, [r4, #16]
 800169c:	b942      	cbnz	r2, 80016b0 <__swsetup_r+0xa4>
 800169e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80016a2:	d1c5      	bne.n	8001630 <__swsetup_r+0x24>
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	0799      	lsls	r1, r3, #30
 80016a8:	bf58      	it	pl
 80016aa:	6962      	ldrpl	r2, [r4, #20]
 80016ac:	60a2      	str	r2, [r4, #8]
 80016ae:	e7f4      	b.n	800169a <__swsetup_r+0x8e>
 80016b0:	2000      	movs	r0, #0
 80016b2:	e7f7      	b.n	80016a4 <__swsetup_r+0x98>
 80016b4:	2000001c 	.word	0x2000001c

080016b8 <memset>:
 80016b8:	4402      	add	r2, r0
 80016ba:	4603      	mov	r3, r0
 80016bc:	4293      	cmp	r3, r2
 80016be:	d100      	bne.n	80016c2 <memset+0xa>
 80016c0:	4770      	bx	lr
 80016c2:	f803 1b01 	strb.w	r1, [r3], #1
 80016c6:	e7f9      	b.n	80016bc <memset+0x4>

080016c8 <strncat>:
 80016c8:	b530      	push	{r4, r5, lr}
 80016ca:	4604      	mov	r4, r0
 80016cc:	7825      	ldrb	r5, [r4, #0]
 80016ce:	4623      	mov	r3, r4
 80016d0:	3401      	adds	r4, #1
 80016d2:	2d00      	cmp	r5, #0
 80016d4:	d1fa      	bne.n	80016cc <strncat+0x4>
 80016d6:	3a01      	subs	r2, #1
 80016d8:	d304      	bcc.n	80016e4 <strncat+0x1c>
 80016da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016de:	f803 4b01 	strb.w	r4, [r3], #1
 80016e2:	b904      	cbnz	r4, 80016e6 <strncat+0x1e>
 80016e4:	bd30      	pop	{r4, r5, pc}
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d1f5      	bne.n	80016d6 <strncat+0xe>
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e7f3      	b.n	80016d6 <strncat+0xe>
	...

080016f0 <_close_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4d06      	ldr	r5, [pc, #24]	@ (800170c <_close_r+0x1c>)
 80016f4:	2300      	movs	r3, #0
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	602b      	str	r3, [r5, #0]
 80016fc:	f7ff f9f1 	bl	8000ae2 <_close>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d102      	bne.n	800170a <_close_r+0x1a>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	b103      	cbz	r3, 800170a <_close_r+0x1a>
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	bd38      	pop	{r3, r4, r5, pc}
 800170c:	20001d74 	.word	0x20001d74

08001710 <_lseek_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4d07      	ldr	r5, [pc, #28]	@ (8001730 <_lseek_r+0x20>)
 8001714:	4604      	mov	r4, r0
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	2200      	movs	r2, #0
 800171c:	602a      	str	r2, [r5, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	f7ff fa06 	bl	8000b30 <_lseek>
 8001724:	1c43      	adds	r3, r0, #1
 8001726:	d102      	bne.n	800172e <_lseek_r+0x1e>
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	b103      	cbz	r3, 800172e <_lseek_r+0x1e>
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	bd38      	pop	{r3, r4, r5, pc}
 8001730:	20001d74 	.word	0x20001d74

08001734 <_read_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4d07      	ldr	r5, [pc, #28]	@ (8001754 <_read_r+0x20>)
 8001738:	4604      	mov	r4, r0
 800173a:	4608      	mov	r0, r1
 800173c:	4611      	mov	r1, r2
 800173e:	2200      	movs	r2, #0
 8001740:	602a      	str	r2, [r5, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	f7ff f994 	bl	8000a70 <_read>
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	d102      	bne.n	8001752 <_read_r+0x1e>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	b103      	cbz	r3, 8001752 <_read_r+0x1e>
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	20001d74 	.word	0x20001d74

08001758 <_sbrk_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4d06      	ldr	r5, [pc, #24]	@ (8001774 <_sbrk_r+0x1c>)
 800175c:	2300      	movs	r3, #0
 800175e:	4604      	mov	r4, r0
 8001760:	4608      	mov	r0, r1
 8001762:	602b      	str	r3, [r5, #0]
 8001764:	f7ff f9f2 	bl	8000b4c <_sbrk>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d102      	bne.n	8001772 <_sbrk_r+0x1a>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	b103      	cbz	r3, 8001772 <_sbrk_r+0x1a>
 8001770:	6023      	str	r3, [r4, #0]
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	20001d74 	.word	0x20001d74

08001778 <_write_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4d07      	ldr	r5, [pc, #28]	@ (8001798 <_write_r+0x20>)
 800177c:	4604      	mov	r4, r0
 800177e:	4608      	mov	r0, r1
 8001780:	4611      	mov	r1, r2
 8001782:	2200      	movs	r2, #0
 8001784:	602a      	str	r2, [r5, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f7ff f98f 	bl	8000aaa <_write>
 800178c:	1c43      	adds	r3, r0, #1
 800178e:	d102      	bne.n	8001796 <_write_r+0x1e>
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	b103      	cbz	r3, 8001796 <_write_r+0x1e>
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	bd38      	pop	{r3, r4, r5, pc}
 8001798:	20001d74 	.word	0x20001d74

0800179c <__errno>:
 800179c:	4b01      	ldr	r3, [pc, #4]	@ (80017a4 <__errno+0x8>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000001c 	.word	0x2000001c

080017a8 <__libc_init_array>:
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	4d0d      	ldr	r5, [pc, #52]	@ (80017e0 <__libc_init_array+0x38>)
 80017ac:	4c0d      	ldr	r4, [pc, #52]	@ (80017e4 <__libc_init_array+0x3c>)
 80017ae:	1b64      	subs	r4, r4, r5
 80017b0:	10a4      	asrs	r4, r4, #2
 80017b2:	2600      	movs	r6, #0
 80017b4:	42a6      	cmp	r6, r4
 80017b6:	d109      	bne.n	80017cc <__libc_init_array+0x24>
 80017b8:	4d0b      	ldr	r5, [pc, #44]	@ (80017e8 <__libc_init_array+0x40>)
 80017ba:	4c0c      	ldr	r4, [pc, #48]	@ (80017ec <__libc_init_array+0x44>)
 80017bc:	f000 fc66 	bl	800208c <_init>
 80017c0:	1b64      	subs	r4, r4, r5
 80017c2:	10a4      	asrs	r4, r4, #2
 80017c4:	2600      	movs	r6, #0
 80017c6:	42a6      	cmp	r6, r4
 80017c8:	d105      	bne.n	80017d6 <__libc_init_array+0x2e>
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d0:	4798      	blx	r3
 80017d2:	3601      	adds	r6, #1
 80017d4:	e7ee      	b.n	80017b4 <__libc_init_array+0xc>
 80017d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017da:	4798      	blx	r3
 80017dc:	3601      	adds	r6, #1
 80017de:	e7f2      	b.n	80017c6 <__libc_init_array+0x1e>
 80017e0:	080023d8 	.word	0x080023d8
 80017e4:	080023d8 	.word	0x080023d8
 80017e8:	080023d8 	.word	0x080023d8
 80017ec:	080023dc 	.word	0x080023dc

080017f0 <__retarget_lock_init_recursive>:
 80017f0:	4770      	bx	lr

080017f2 <__retarget_lock_acquire_recursive>:
 80017f2:	4770      	bx	lr

080017f4 <__retarget_lock_release_recursive>:
 80017f4:	4770      	bx	lr
	...

080017f8 <_free_r>:
 80017f8:	b538      	push	{r3, r4, r5, lr}
 80017fa:	4605      	mov	r5, r0
 80017fc:	2900      	cmp	r1, #0
 80017fe:	d041      	beq.n	8001884 <_free_r+0x8c>
 8001800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001804:	1f0c      	subs	r4, r1, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfb8      	it	lt
 800180a:	18e4      	addlt	r4, r4, r3
 800180c:	f7ff fd3e 	bl	800128c <__malloc_lock>
 8001810:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <_free_r+0x90>)
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	b933      	cbnz	r3, 8001824 <_free_r+0x2c>
 8001816:	6063      	str	r3, [r4, #4]
 8001818:	6014      	str	r4, [r2, #0]
 800181a:	4628      	mov	r0, r5
 800181c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001820:	f7ff bd3a 	b.w	8001298 <__malloc_unlock>
 8001824:	42a3      	cmp	r3, r4
 8001826:	d908      	bls.n	800183a <_free_r+0x42>
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	1821      	adds	r1, r4, r0
 800182c:	428b      	cmp	r3, r1
 800182e:	bf01      	itttt	eq
 8001830:	6819      	ldreq	r1, [r3, #0]
 8001832:	685b      	ldreq	r3, [r3, #4]
 8001834:	1809      	addeq	r1, r1, r0
 8001836:	6021      	streq	r1, [r4, #0]
 8001838:	e7ed      	b.n	8001816 <_free_r+0x1e>
 800183a:	461a      	mov	r2, r3
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	b10b      	cbz	r3, 8001844 <_free_r+0x4c>
 8001840:	42a3      	cmp	r3, r4
 8001842:	d9fa      	bls.n	800183a <_free_r+0x42>
 8001844:	6811      	ldr	r1, [r2, #0]
 8001846:	1850      	adds	r0, r2, r1
 8001848:	42a0      	cmp	r0, r4
 800184a:	d10b      	bne.n	8001864 <_free_r+0x6c>
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	4401      	add	r1, r0
 8001850:	1850      	adds	r0, r2, r1
 8001852:	4283      	cmp	r3, r0
 8001854:	6011      	str	r1, [r2, #0]
 8001856:	d1e0      	bne.n	800181a <_free_r+0x22>
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	6053      	str	r3, [r2, #4]
 800185e:	4408      	add	r0, r1
 8001860:	6010      	str	r0, [r2, #0]
 8001862:	e7da      	b.n	800181a <_free_r+0x22>
 8001864:	d902      	bls.n	800186c <_free_r+0x74>
 8001866:	230c      	movs	r3, #12
 8001868:	602b      	str	r3, [r5, #0]
 800186a:	e7d6      	b.n	800181a <_free_r+0x22>
 800186c:	6820      	ldr	r0, [r4, #0]
 800186e:	1821      	adds	r1, r4, r0
 8001870:	428b      	cmp	r3, r1
 8001872:	bf04      	itt	eq
 8001874:	6819      	ldreq	r1, [r3, #0]
 8001876:	685b      	ldreq	r3, [r3, #4]
 8001878:	6063      	str	r3, [r4, #4]
 800187a:	bf04      	itt	eq
 800187c:	1809      	addeq	r1, r1, r0
 800187e:	6021      	streq	r1, [r4, #0]
 8001880:	6054      	str	r4, [r2, #4]
 8001882:	e7ca      	b.n	800181a <_free_r+0x22>
 8001884:	bd38      	pop	{r3, r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	20001c34 	.word	0x20001c34

0800188c <__sfputc_r>:
 800188c:	6893      	ldr	r3, [r2, #8]
 800188e:	3b01      	subs	r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	b410      	push	{r4}
 8001894:	6093      	str	r3, [r2, #8]
 8001896:	da08      	bge.n	80018aa <__sfputc_r+0x1e>
 8001898:	6994      	ldr	r4, [r2, #24]
 800189a:	42a3      	cmp	r3, r4
 800189c:	db01      	blt.n	80018a2 <__sfputc_r+0x16>
 800189e:	290a      	cmp	r1, #10
 80018a0:	d103      	bne.n	80018aa <__sfputc_r+0x1e>
 80018a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a6:	f7ff be72 	b.w	800158e <__swbuf_r>
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	1c58      	adds	r0, r3, #1
 80018ae:	6010      	str	r0, [r2, #0]
 80018b0:	7019      	strb	r1, [r3, #0]
 80018b2:	4608      	mov	r0, r1
 80018b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <__sfputs_r>:
 80018ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018bc:	4606      	mov	r6, r0
 80018be:	460f      	mov	r7, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	18d5      	adds	r5, r2, r3
 80018c4:	42ac      	cmp	r4, r5
 80018c6:	d101      	bne.n	80018cc <__sfputs_r+0x12>
 80018c8:	2000      	movs	r0, #0
 80018ca:	e007      	b.n	80018dc <__sfputs_r+0x22>
 80018cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018d0:	463a      	mov	r2, r7
 80018d2:	4630      	mov	r0, r6
 80018d4:	f7ff ffda 	bl	800188c <__sfputc_r>
 80018d8:	1c43      	adds	r3, r0, #1
 80018da:	d1f3      	bne.n	80018c4 <__sfputs_r+0xa>
 80018dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018e0 <_vfiprintf_r>:
 80018e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e4:	460d      	mov	r5, r1
 80018e6:	b09d      	sub	sp, #116	@ 0x74
 80018e8:	4614      	mov	r4, r2
 80018ea:	4698      	mov	r8, r3
 80018ec:	4606      	mov	r6, r0
 80018ee:	b118      	cbz	r0, 80018f8 <_vfiprintf_r+0x18>
 80018f0:	6a03      	ldr	r3, [r0, #32]
 80018f2:	b90b      	cbnz	r3, 80018f8 <_vfiprintf_r+0x18>
 80018f4:	f7ff fd62 	bl	80013bc <__sinit>
 80018f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018fa:	07d9      	lsls	r1, r3, #31
 80018fc:	d405      	bmi.n	800190a <_vfiprintf_r+0x2a>
 80018fe:	89ab      	ldrh	r3, [r5, #12]
 8001900:	059a      	lsls	r2, r3, #22
 8001902:	d402      	bmi.n	800190a <_vfiprintf_r+0x2a>
 8001904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001906:	f7ff ff74 	bl	80017f2 <__retarget_lock_acquire_recursive>
 800190a:	89ab      	ldrh	r3, [r5, #12]
 800190c:	071b      	lsls	r3, r3, #28
 800190e:	d501      	bpl.n	8001914 <_vfiprintf_r+0x34>
 8001910:	692b      	ldr	r3, [r5, #16]
 8001912:	b99b      	cbnz	r3, 800193c <_vfiprintf_r+0x5c>
 8001914:	4629      	mov	r1, r5
 8001916:	4630      	mov	r0, r6
 8001918:	f7ff fe78 	bl	800160c <__swsetup_r>
 800191c:	b170      	cbz	r0, 800193c <_vfiprintf_r+0x5c>
 800191e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001920:	07dc      	lsls	r4, r3, #31
 8001922:	d504      	bpl.n	800192e <_vfiprintf_r+0x4e>
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	b01d      	add	sp, #116	@ 0x74
 800192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800192e:	89ab      	ldrh	r3, [r5, #12]
 8001930:	0598      	lsls	r0, r3, #22
 8001932:	d4f7      	bmi.n	8001924 <_vfiprintf_r+0x44>
 8001934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001936:	f7ff ff5d 	bl	80017f4 <__retarget_lock_release_recursive>
 800193a:	e7f3      	b.n	8001924 <_vfiprintf_r+0x44>
 800193c:	2300      	movs	r3, #0
 800193e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001940:	2320      	movs	r3, #32
 8001942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001946:	f8cd 800c 	str.w	r8, [sp, #12]
 800194a:	2330      	movs	r3, #48	@ 0x30
 800194c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001afc <_vfiprintf_r+0x21c>
 8001950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001954:	f04f 0901 	mov.w	r9, #1
 8001958:	4623      	mov	r3, r4
 800195a:	469a      	mov	sl, r3
 800195c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001960:	b10a      	cbz	r2, 8001966 <_vfiprintf_r+0x86>
 8001962:	2a25      	cmp	r2, #37	@ 0x25
 8001964:	d1f9      	bne.n	800195a <_vfiprintf_r+0x7a>
 8001966:	ebba 0b04 	subs.w	fp, sl, r4
 800196a:	d00b      	beq.n	8001984 <_vfiprintf_r+0xa4>
 800196c:	465b      	mov	r3, fp
 800196e:	4622      	mov	r2, r4
 8001970:	4629      	mov	r1, r5
 8001972:	4630      	mov	r0, r6
 8001974:	f7ff ffa1 	bl	80018ba <__sfputs_r>
 8001978:	3001      	adds	r0, #1
 800197a:	f000 80a7 	beq.w	8001acc <_vfiprintf_r+0x1ec>
 800197e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001980:	445a      	add	r2, fp
 8001982:	9209      	str	r2, [sp, #36]	@ 0x24
 8001984:	f89a 3000 	ldrb.w	r3, [sl]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 809f 	beq.w	8001acc <_vfiprintf_r+0x1ec>
 800198e:	2300      	movs	r3, #0
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001998:	f10a 0a01 	add.w	sl, sl, #1
 800199c:	9304      	str	r3, [sp, #16]
 800199e:	9307      	str	r3, [sp, #28]
 80019a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80019a6:	4654      	mov	r4, sl
 80019a8:	2205      	movs	r2, #5
 80019aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ae:	4853      	ldr	r0, [pc, #332]	@ (8001afc <_vfiprintf_r+0x21c>)
 80019b0:	f7fe fc2e 	bl	8000210 <memchr>
 80019b4:	9a04      	ldr	r2, [sp, #16]
 80019b6:	b9d8      	cbnz	r0, 80019f0 <_vfiprintf_r+0x110>
 80019b8:	06d1      	lsls	r1, r2, #27
 80019ba:	bf44      	itt	mi
 80019bc:	2320      	movmi	r3, #32
 80019be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019c2:	0713      	lsls	r3, r2, #28
 80019c4:	bf44      	itt	mi
 80019c6:	232b      	movmi	r3, #43	@ 0x2b
 80019c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019cc:	f89a 3000 	ldrb.w	r3, [sl]
 80019d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80019d2:	d015      	beq.n	8001a00 <_vfiprintf_r+0x120>
 80019d4:	9a07      	ldr	r2, [sp, #28]
 80019d6:	4654      	mov	r4, sl
 80019d8:	2000      	movs	r0, #0
 80019da:	f04f 0c0a 	mov.w	ip, #10
 80019de:	4621      	mov	r1, r4
 80019e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019e4:	3b30      	subs	r3, #48	@ 0x30
 80019e6:	2b09      	cmp	r3, #9
 80019e8:	d94b      	bls.n	8001a82 <_vfiprintf_r+0x1a2>
 80019ea:	b1b0      	cbz	r0, 8001a1a <_vfiprintf_r+0x13a>
 80019ec:	9207      	str	r2, [sp, #28]
 80019ee:	e014      	b.n	8001a1a <_vfiprintf_r+0x13a>
 80019f0:	eba0 0308 	sub.w	r3, r0, r8
 80019f4:	fa09 f303 	lsl.w	r3, r9, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	9304      	str	r3, [sp, #16]
 80019fc:	46a2      	mov	sl, r4
 80019fe:	e7d2      	b.n	80019a6 <_vfiprintf_r+0xc6>
 8001a00:	9b03      	ldr	r3, [sp, #12]
 8001a02:	1d19      	adds	r1, r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	9103      	str	r1, [sp, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bfbb      	ittet	lt
 8001a0c:	425b      	neglt	r3, r3
 8001a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8001a12:	9307      	strge	r3, [sp, #28]
 8001a14:	9307      	strlt	r3, [sp, #28]
 8001a16:	bfb8      	it	lt
 8001a18:	9204      	strlt	r2, [sp, #16]
 8001a1a:	7823      	ldrb	r3, [r4, #0]
 8001a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a1e:	d10a      	bne.n	8001a36 <_vfiprintf_r+0x156>
 8001a20:	7863      	ldrb	r3, [r4, #1]
 8001a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a24:	d132      	bne.n	8001a8c <_vfiprintf_r+0x1ac>
 8001a26:	9b03      	ldr	r3, [sp, #12]
 8001a28:	1d1a      	adds	r2, r3, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	9203      	str	r2, [sp, #12]
 8001a2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a32:	3402      	adds	r4, #2
 8001a34:	9305      	str	r3, [sp, #20]
 8001a36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b0c <_vfiprintf_r+0x22c>
 8001a3a:	7821      	ldrb	r1, [r4, #0]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4650      	mov	r0, sl
 8001a40:	f7fe fbe6 	bl	8000210 <memchr>
 8001a44:	b138      	cbz	r0, 8001a56 <_vfiprintf_r+0x176>
 8001a46:	9b04      	ldr	r3, [sp, #16]
 8001a48:	eba0 000a 	sub.w	r0, r0, sl
 8001a4c:	2240      	movs	r2, #64	@ 0x40
 8001a4e:	4082      	lsls	r2, r0
 8001a50:	4313      	orrs	r3, r2
 8001a52:	3401      	adds	r4, #1
 8001a54:	9304      	str	r3, [sp, #16]
 8001a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a5a:	4829      	ldr	r0, [pc, #164]	@ (8001b00 <_vfiprintf_r+0x220>)
 8001a5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a60:	2206      	movs	r2, #6
 8001a62:	f7fe fbd5 	bl	8000210 <memchr>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d03f      	beq.n	8001aea <_vfiprintf_r+0x20a>
 8001a6a:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <_vfiprintf_r+0x224>)
 8001a6c:	bb1b      	cbnz	r3, 8001ab6 <_vfiprintf_r+0x1d6>
 8001a6e:	9b03      	ldr	r3, [sp, #12]
 8001a70:	3307      	adds	r3, #7
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	3308      	adds	r3, #8
 8001a78:	9303      	str	r3, [sp, #12]
 8001a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a7c:	443b      	add	r3, r7
 8001a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a80:	e76a      	b.n	8001958 <_vfiprintf_r+0x78>
 8001a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a86:	460c      	mov	r4, r1
 8001a88:	2001      	movs	r0, #1
 8001a8a:	e7a8      	b.n	80019de <_vfiprintf_r+0xfe>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	3401      	adds	r4, #1
 8001a90:	9305      	str	r3, [sp, #20]
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0c0a 	mov.w	ip, #10
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a9e:	3a30      	subs	r2, #48	@ 0x30
 8001aa0:	2a09      	cmp	r2, #9
 8001aa2:	d903      	bls.n	8001aac <_vfiprintf_r+0x1cc>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0c6      	beq.n	8001a36 <_vfiprintf_r+0x156>
 8001aa8:	9105      	str	r1, [sp, #20]
 8001aaa:	e7c4      	b.n	8001a36 <_vfiprintf_r+0x156>
 8001aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e7f0      	b.n	8001a98 <_vfiprintf_r+0x1b8>
 8001ab6:	ab03      	add	r3, sp, #12
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	462a      	mov	r2, r5
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <_vfiprintf_r+0x228>)
 8001abe:	a904      	add	r1, sp, #16
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f3af 8000 	nop.w
 8001ac6:	4607      	mov	r7, r0
 8001ac8:	1c78      	adds	r0, r7, #1
 8001aca:	d1d6      	bne.n	8001a7a <_vfiprintf_r+0x19a>
 8001acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ace:	07d9      	lsls	r1, r3, #31
 8001ad0:	d405      	bmi.n	8001ade <_vfiprintf_r+0x1fe>
 8001ad2:	89ab      	ldrh	r3, [r5, #12]
 8001ad4:	059a      	lsls	r2, r3, #22
 8001ad6:	d402      	bmi.n	8001ade <_vfiprintf_r+0x1fe>
 8001ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ada:	f7ff fe8b 	bl	80017f4 <__retarget_lock_release_recursive>
 8001ade:	89ab      	ldrh	r3, [r5, #12]
 8001ae0:	065b      	lsls	r3, r3, #25
 8001ae2:	f53f af1f 	bmi.w	8001924 <_vfiprintf_r+0x44>
 8001ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ae8:	e71e      	b.n	8001928 <_vfiprintf_r+0x48>
 8001aea:	ab03      	add	r3, sp, #12
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	462a      	mov	r2, r5
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <_vfiprintf_r+0x228>)
 8001af2:	a904      	add	r1, sp, #16
 8001af4:	4630      	mov	r0, r6
 8001af6:	f000 f879 	bl	8001bec <_printf_i>
 8001afa:	e7e4      	b.n	8001ac6 <_vfiprintf_r+0x1e6>
 8001afc:	0800239a 	.word	0x0800239a
 8001b00:	080023a4 	.word	0x080023a4
 8001b04:	00000000 	.word	0x00000000
 8001b08:	080018bb 	.word	0x080018bb
 8001b0c:	080023a0 	.word	0x080023a0

08001b10 <_printf_common>:
 8001b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b14:	4616      	mov	r6, r2
 8001b16:	4698      	mov	r8, r3
 8001b18:	688a      	ldr	r2, [r1, #8]
 8001b1a:	690b      	ldr	r3, [r1, #16]
 8001b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bfb8      	it	lt
 8001b24:	4613      	movlt	r3, r2
 8001b26:	6033      	str	r3, [r6, #0]
 8001b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b2c:	4607      	mov	r7, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	b10a      	cbz	r2, 8001b36 <_printf_common+0x26>
 8001b32:	3301      	adds	r3, #1
 8001b34:	6033      	str	r3, [r6, #0]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	0699      	lsls	r1, r3, #26
 8001b3a:	bf42      	ittt	mi
 8001b3c:	6833      	ldrmi	r3, [r6, #0]
 8001b3e:	3302      	addmi	r3, #2
 8001b40:	6033      	strmi	r3, [r6, #0]
 8001b42:	6825      	ldr	r5, [r4, #0]
 8001b44:	f015 0506 	ands.w	r5, r5, #6
 8001b48:	d106      	bne.n	8001b58 <_printf_common+0x48>
 8001b4a:	f104 0a19 	add.w	sl, r4, #25
 8001b4e:	68e3      	ldr	r3, [r4, #12]
 8001b50:	6832      	ldr	r2, [r6, #0]
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	42ab      	cmp	r3, r5
 8001b56:	dc26      	bgt.n	8001ba6 <_printf_common+0x96>
 8001b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b5c:	6822      	ldr	r2, [r4, #0]
 8001b5e:	3b00      	subs	r3, #0
 8001b60:	bf18      	it	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	0692      	lsls	r2, r2, #26
 8001b66:	d42b      	bmi.n	8001bc0 <_printf_common+0xb0>
 8001b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	4638      	mov	r0, r7
 8001b70:	47c8      	blx	r9
 8001b72:	3001      	adds	r0, #1
 8001b74:	d01e      	beq.n	8001bb4 <_printf_common+0xa4>
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	6922      	ldr	r2, [r4, #16]
 8001b7a:	f003 0306 	and.w	r3, r3, #6
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf02      	ittt	eq
 8001b82:	68e5      	ldreq	r5, [r4, #12]
 8001b84:	6833      	ldreq	r3, [r6, #0]
 8001b86:	1aed      	subeq	r5, r5, r3
 8001b88:	68a3      	ldr	r3, [r4, #8]
 8001b8a:	bf0c      	ite	eq
 8001b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b90:	2500      	movne	r5, #0
 8001b92:	4293      	cmp	r3, r2
 8001b94:	bfc4      	itt	gt
 8001b96:	1a9b      	subgt	r3, r3, r2
 8001b98:	18ed      	addgt	r5, r5, r3
 8001b9a:	2600      	movs	r6, #0
 8001b9c:	341a      	adds	r4, #26
 8001b9e:	42b5      	cmp	r5, r6
 8001ba0:	d11a      	bne.n	8001bd8 <_printf_common+0xc8>
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e008      	b.n	8001bb8 <_printf_common+0xa8>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4652      	mov	r2, sl
 8001baa:	4641      	mov	r1, r8
 8001bac:	4638      	mov	r0, r7
 8001bae:	47c8      	blx	r9
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	d103      	bne.n	8001bbc <_printf_common+0xac>
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bbc:	3501      	adds	r5, #1
 8001bbe:	e7c6      	b.n	8001b4e <_printf_common+0x3e>
 8001bc0:	18e1      	adds	r1, r4, r3
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	2030      	movs	r0, #48	@ 0x30
 8001bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bca:	4422      	add	r2, r4
 8001bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	e7c7      	b.n	8001b68 <_printf_common+0x58>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4622      	mov	r2, r4
 8001bdc:	4641      	mov	r1, r8
 8001bde:	4638      	mov	r0, r7
 8001be0:	47c8      	blx	r9
 8001be2:	3001      	adds	r0, #1
 8001be4:	d0e6      	beq.n	8001bb4 <_printf_common+0xa4>
 8001be6:	3601      	adds	r6, #1
 8001be8:	e7d9      	b.n	8001b9e <_printf_common+0x8e>
	...

08001bec <_printf_i>:
 8001bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf0:	7e0f      	ldrb	r7, [r1, #24]
 8001bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001bf4:	2f78      	cmp	r7, #120	@ 0x78
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	4680      	mov	r8, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	469a      	mov	sl, r3
 8001bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c02:	d807      	bhi.n	8001c14 <_printf_i+0x28>
 8001c04:	2f62      	cmp	r7, #98	@ 0x62
 8001c06:	d80a      	bhi.n	8001c1e <_printf_i+0x32>
 8001c08:	2f00      	cmp	r7, #0
 8001c0a:	f000 80d2 	beq.w	8001db2 <_printf_i+0x1c6>
 8001c0e:	2f58      	cmp	r7, #88	@ 0x58
 8001c10:	f000 80b9 	beq.w	8001d86 <_printf_i+0x19a>
 8001c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c1c:	e03a      	b.n	8001c94 <_printf_i+0xa8>
 8001c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c22:	2b15      	cmp	r3, #21
 8001c24:	d8f6      	bhi.n	8001c14 <_printf_i+0x28>
 8001c26:	a101      	add	r1, pc, #4	@ (adr r1, 8001c2c <_printf_i+0x40>)
 8001c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c2c:	08001c85 	.word	0x08001c85
 8001c30:	08001c99 	.word	0x08001c99
 8001c34:	08001c15 	.word	0x08001c15
 8001c38:	08001c15 	.word	0x08001c15
 8001c3c:	08001c15 	.word	0x08001c15
 8001c40:	08001c15 	.word	0x08001c15
 8001c44:	08001c99 	.word	0x08001c99
 8001c48:	08001c15 	.word	0x08001c15
 8001c4c:	08001c15 	.word	0x08001c15
 8001c50:	08001c15 	.word	0x08001c15
 8001c54:	08001c15 	.word	0x08001c15
 8001c58:	08001d99 	.word	0x08001d99
 8001c5c:	08001cc3 	.word	0x08001cc3
 8001c60:	08001d53 	.word	0x08001d53
 8001c64:	08001c15 	.word	0x08001c15
 8001c68:	08001c15 	.word	0x08001c15
 8001c6c:	08001dbb 	.word	0x08001dbb
 8001c70:	08001c15 	.word	0x08001c15
 8001c74:	08001cc3 	.word	0x08001cc3
 8001c78:	08001c15 	.word	0x08001c15
 8001c7c:	08001c15 	.word	0x08001c15
 8001c80:	08001d5b 	.word	0x08001d5b
 8001c84:	6833      	ldr	r3, [r6, #0]
 8001c86:	1d1a      	adds	r2, r3, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6032      	str	r2, [r6, #0]
 8001c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c94:	2301      	movs	r3, #1
 8001c96:	e09d      	b.n	8001dd4 <_printf_i+0x1e8>
 8001c98:	6833      	ldr	r3, [r6, #0]
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	1d19      	adds	r1, r3, #4
 8001c9e:	6031      	str	r1, [r6, #0]
 8001ca0:	0606      	lsls	r6, r0, #24
 8001ca2:	d501      	bpl.n	8001ca8 <_printf_i+0xbc>
 8001ca4:	681d      	ldr	r5, [r3, #0]
 8001ca6:	e003      	b.n	8001cb0 <_printf_i+0xc4>
 8001ca8:	0645      	lsls	r5, r0, #25
 8001caa:	d5fb      	bpl.n	8001ca4 <_printf_i+0xb8>
 8001cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cb0:	2d00      	cmp	r5, #0
 8001cb2:	da03      	bge.n	8001cbc <_printf_i+0xd0>
 8001cb4:	232d      	movs	r3, #45	@ 0x2d
 8001cb6:	426d      	negs	r5, r5
 8001cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cbc:	4859      	ldr	r0, [pc, #356]	@ (8001e24 <_printf_i+0x238>)
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	e011      	b.n	8001ce6 <_printf_i+0xfa>
 8001cc2:	6821      	ldr	r1, [r4, #0]
 8001cc4:	6833      	ldr	r3, [r6, #0]
 8001cc6:	0608      	lsls	r0, r1, #24
 8001cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ccc:	d402      	bmi.n	8001cd4 <_printf_i+0xe8>
 8001cce:	0649      	lsls	r1, r1, #25
 8001cd0:	bf48      	it	mi
 8001cd2:	b2ad      	uxthmi	r5, r5
 8001cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001cd6:	4853      	ldr	r0, [pc, #332]	@ (8001e24 <_printf_i+0x238>)
 8001cd8:	6033      	str	r3, [r6, #0]
 8001cda:	bf14      	ite	ne
 8001cdc:	230a      	movne	r3, #10
 8001cde:	2308      	moveq	r3, #8
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001ce6:	6866      	ldr	r6, [r4, #4]
 8001ce8:	60a6      	str	r6, [r4, #8]
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	bfa2      	ittt	ge
 8001cee:	6821      	ldrge	r1, [r4, #0]
 8001cf0:	f021 0104 	bicge.w	r1, r1, #4
 8001cf4:	6021      	strge	r1, [r4, #0]
 8001cf6:	b90d      	cbnz	r5, 8001cfc <_printf_i+0x110>
 8001cf8:	2e00      	cmp	r6, #0
 8001cfa:	d04b      	beq.n	8001d94 <_printf_i+0x1a8>
 8001cfc:	4616      	mov	r6, r2
 8001cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d02:	fb03 5711 	mls	r7, r3, r1, r5
 8001d06:	5dc7      	ldrb	r7, [r0, r7]
 8001d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d0c:	462f      	mov	r7, r5
 8001d0e:	42bb      	cmp	r3, r7
 8001d10:	460d      	mov	r5, r1
 8001d12:	d9f4      	bls.n	8001cfe <_printf_i+0x112>
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d10b      	bne.n	8001d30 <_printf_i+0x144>
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	07df      	lsls	r7, r3, #31
 8001d1c:	d508      	bpl.n	8001d30 <_printf_i+0x144>
 8001d1e:	6923      	ldr	r3, [r4, #16]
 8001d20:	6861      	ldr	r1, [r4, #4]
 8001d22:	4299      	cmp	r1, r3
 8001d24:	bfde      	ittt	le
 8001d26:	2330      	movle	r3, #48	@ 0x30
 8001d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d30:	1b92      	subs	r2, r2, r6
 8001d32:	6122      	str	r2, [r4, #16]
 8001d34:	f8cd a000 	str.w	sl, [sp]
 8001d38:	464b      	mov	r3, r9
 8001d3a:	aa03      	add	r2, sp, #12
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	4640      	mov	r0, r8
 8001d40:	f7ff fee6 	bl	8001b10 <_printf_common>
 8001d44:	3001      	adds	r0, #1
 8001d46:	d14a      	bne.n	8001dde <_printf_i+0x1f2>
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	b004      	add	sp, #16
 8001d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	f043 0320 	orr.w	r3, r3, #32
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	4833      	ldr	r0, [pc, #204]	@ (8001e28 <_printf_i+0x23c>)
 8001d5c:	2778      	movs	r7, #120	@ 0x78
 8001d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	6831      	ldr	r1, [r6, #0]
 8001d66:	061f      	lsls	r7, r3, #24
 8001d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d6c:	d402      	bmi.n	8001d74 <_printf_i+0x188>
 8001d6e:	065f      	lsls	r7, r3, #25
 8001d70:	bf48      	it	mi
 8001d72:	b2ad      	uxthmi	r5, r5
 8001d74:	6031      	str	r1, [r6, #0]
 8001d76:	07d9      	lsls	r1, r3, #31
 8001d78:	bf44      	itt	mi
 8001d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8001d7e:	6023      	strmi	r3, [r4, #0]
 8001d80:	b11d      	cbz	r5, 8001d8a <_printf_i+0x19e>
 8001d82:	2310      	movs	r3, #16
 8001d84:	e7ac      	b.n	8001ce0 <_printf_i+0xf4>
 8001d86:	4827      	ldr	r0, [pc, #156]	@ (8001e24 <_printf_i+0x238>)
 8001d88:	e7e9      	b.n	8001d5e <_printf_i+0x172>
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	f023 0320 	bic.w	r3, r3, #32
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	e7f6      	b.n	8001d82 <_printf_i+0x196>
 8001d94:	4616      	mov	r6, r2
 8001d96:	e7bd      	b.n	8001d14 <_printf_i+0x128>
 8001d98:	6833      	ldr	r3, [r6, #0]
 8001d9a:	6825      	ldr	r5, [r4, #0]
 8001d9c:	6961      	ldr	r1, [r4, #20]
 8001d9e:	1d18      	adds	r0, r3, #4
 8001da0:	6030      	str	r0, [r6, #0]
 8001da2:	062e      	lsls	r6, r5, #24
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	d501      	bpl.n	8001dac <_printf_i+0x1c0>
 8001da8:	6019      	str	r1, [r3, #0]
 8001daa:	e002      	b.n	8001db2 <_printf_i+0x1c6>
 8001dac:	0668      	lsls	r0, r5, #25
 8001dae:	d5fb      	bpl.n	8001da8 <_printf_i+0x1bc>
 8001db0:	8019      	strh	r1, [r3, #0]
 8001db2:	2300      	movs	r3, #0
 8001db4:	6123      	str	r3, [r4, #16]
 8001db6:	4616      	mov	r6, r2
 8001db8:	e7bc      	b.n	8001d34 <_printf_i+0x148>
 8001dba:	6833      	ldr	r3, [r6, #0]
 8001dbc:	1d1a      	adds	r2, r3, #4
 8001dbe:	6032      	str	r2, [r6, #0]
 8001dc0:	681e      	ldr	r6, [r3, #0]
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4630      	mov	r0, r6
 8001dc8:	f7fe fa22 	bl	8000210 <memchr>
 8001dcc:	b108      	cbz	r0, 8001dd2 <_printf_i+0x1e6>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	6060      	str	r0, [r4, #4]
 8001dd2:	6863      	ldr	r3, [r4, #4]
 8001dd4:	6123      	str	r3, [r4, #16]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ddc:	e7aa      	b.n	8001d34 <_printf_i+0x148>
 8001dde:	6923      	ldr	r3, [r4, #16]
 8001de0:	4632      	mov	r2, r6
 8001de2:	4649      	mov	r1, r9
 8001de4:	4640      	mov	r0, r8
 8001de6:	47d0      	blx	sl
 8001de8:	3001      	adds	r0, #1
 8001dea:	d0ad      	beq.n	8001d48 <_printf_i+0x15c>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	079b      	lsls	r3, r3, #30
 8001df0:	d413      	bmi.n	8001e1a <_printf_i+0x22e>
 8001df2:	68e0      	ldr	r0, [r4, #12]
 8001df4:	9b03      	ldr	r3, [sp, #12]
 8001df6:	4298      	cmp	r0, r3
 8001df8:	bfb8      	it	lt
 8001dfa:	4618      	movlt	r0, r3
 8001dfc:	e7a6      	b.n	8001d4c <_printf_i+0x160>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	4632      	mov	r2, r6
 8001e02:	4649      	mov	r1, r9
 8001e04:	4640      	mov	r0, r8
 8001e06:	47d0      	blx	sl
 8001e08:	3001      	adds	r0, #1
 8001e0a:	d09d      	beq.n	8001d48 <_printf_i+0x15c>
 8001e0c:	3501      	adds	r5, #1
 8001e0e:	68e3      	ldr	r3, [r4, #12]
 8001e10:	9903      	ldr	r1, [sp, #12]
 8001e12:	1a5b      	subs	r3, r3, r1
 8001e14:	42ab      	cmp	r3, r5
 8001e16:	dcf2      	bgt.n	8001dfe <_printf_i+0x212>
 8001e18:	e7eb      	b.n	8001df2 <_printf_i+0x206>
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	f104 0619 	add.w	r6, r4, #25
 8001e20:	e7f5      	b.n	8001e0e <_printf_i+0x222>
 8001e22:	bf00      	nop
 8001e24:	080023ab 	.word	0x080023ab
 8001e28:	080023bc 	.word	0x080023bc

08001e2c <__sflush_r>:
 8001e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e34:	0716      	lsls	r6, r2, #28
 8001e36:	4605      	mov	r5, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	d454      	bmi.n	8001ee6 <__sflush_r+0xba>
 8001e3c:	684b      	ldr	r3, [r1, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dc02      	bgt.n	8001e48 <__sflush_r+0x1c>
 8001e42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd48      	ble.n	8001eda <__sflush_r+0xae>
 8001e48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e4a:	2e00      	cmp	r6, #0
 8001e4c:	d045      	beq.n	8001eda <__sflush_r+0xae>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e54:	682f      	ldr	r7, [r5, #0]
 8001e56:	6a21      	ldr	r1, [r4, #32]
 8001e58:	602b      	str	r3, [r5, #0]
 8001e5a:	d030      	beq.n	8001ebe <__sflush_r+0x92>
 8001e5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e5e:	89a3      	ldrh	r3, [r4, #12]
 8001e60:	0759      	lsls	r1, r3, #29
 8001e62:	d505      	bpl.n	8001e70 <__sflush_r+0x44>
 8001e64:	6863      	ldr	r3, [r4, #4]
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e6a:	b10b      	cbz	r3, 8001e70 <__sflush_r+0x44>
 8001e6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e6e:	1ad2      	subs	r2, r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e74:	6a21      	ldr	r1, [r4, #32]
 8001e76:	4628      	mov	r0, r5
 8001e78:	47b0      	blx	r6
 8001e7a:	1c43      	adds	r3, r0, #1
 8001e7c:	89a3      	ldrh	r3, [r4, #12]
 8001e7e:	d106      	bne.n	8001e8e <__sflush_r+0x62>
 8001e80:	6829      	ldr	r1, [r5, #0]
 8001e82:	291d      	cmp	r1, #29
 8001e84:	d82b      	bhi.n	8001ede <__sflush_r+0xb2>
 8001e86:	4a2a      	ldr	r2, [pc, #168]	@ (8001f30 <__sflush_r+0x104>)
 8001e88:	410a      	asrs	r2, r1
 8001e8a:	07d6      	lsls	r6, r2, #31
 8001e8c:	d427      	bmi.n	8001ede <__sflush_r+0xb2>
 8001e8e:	2200      	movs	r2, #0
 8001e90:	6062      	str	r2, [r4, #4]
 8001e92:	04d9      	lsls	r1, r3, #19
 8001e94:	6922      	ldr	r2, [r4, #16]
 8001e96:	6022      	str	r2, [r4, #0]
 8001e98:	d504      	bpl.n	8001ea4 <__sflush_r+0x78>
 8001e9a:	1c42      	adds	r2, r0, #1
 8001e9c:	d101      	bne.n	8001ea2 <__sflush_r+0x76>
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	b903      	cbnz	r3, 8001ea4 <__sflush_r+0x78>
 8001ea2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ea6:	602f      	str	r7, [r5, #0]
 8001ea8:	b1b9      	cbz	r1, 8001eda <__sflush_r+0xae>
 8001eaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	d002      	beq.n	8001eb8 <__sflush_r+0x8c>
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f7ff fca0 	bl	80017f8 <_free_r>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ebc:	e00d      	b.n	8001eda <__sflush_r+0xae>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	47b0      	blx	r6
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	1c50      	adds	r0, r2, #1
 8001ec8:	d1c9      	bne.n	8001e5e <__sflush_r+0x32>
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0c6      	beq.n	8001e5e <__sflush_r+0x32>
 8001ed0:	2b1d      	cmp	r3, #29
 8001ed2:	d001      	beq.n	8001ed8 <__sflush_r+0xac>
 8001ed4:	2b16      	cmp	r3, #22
 8001ed6:	d11e      	bne.n	8001f16 <__sflush_r+0xea>
 8001ed8:	602f      	str	r7, [r5, #0]
 8001eda:	2000      	movs	r0, #0
 8001edc:	e022      	b.n	8001f24 <__sflush_r+0xf8>
 8001ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	e01b      	b.n	8001f1e <__sflush_r+0xf2>
 8001ee6:	690f      	ldr	r7, [r1, #16]
 8001ee8:	2f00      	cmp	r7, #0
 8001eea:	d0f6      	beq.n	8001eda <__sflush_r+0xae>
 8001eec:	0793      	lsls	r3, r2, #30
 8001eee:	680e      	ldr	r6, [r1, #0]
 8001ef0:	bf08      	it	eq
 8001ef2:	694b      	ldreq	r3, [r1, #20]
 8001ef4:	600f      	str	r7, [r1, #0]
 8001ef6:	bf18      	it	ne
 8001ef8:	2300      	movne	r3, #0
 8001efa:	eba6 0807 	sub.w	r8, r6, r7
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	f1b8 0f00 	cmp.w	r8, #0
 8001f04:	dde9      	ble.n	8001eda <__sflush_r+0xae>
 8001f06:	6a21      	ldr	r1, [r4, #32]
 8001f08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001f0a:	4643      	mov	r3, r8
 8001f0c:	463a      	mov	r2, r7
 8001f0e:	4628      	mov	r0, r5
 8001f10:	47b0      	blx	r6
 8001f12:	2800      	cmp	r0, #0
 8001f14:	dc08      	bgt.n	8001f28 <__sflush_r+0xfc>
 8001f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f1e:	81a3      	strh	r3, [r4, #12]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f28:	4407      	add	r7, r0
 8001f2a:	eba8 0800 	sub.w	r8, r8, r0
 8001f2e:	e7e7      	b.n	8001f00 <__sflush_r+0xd4>
 8001f30:	dfbffffe 	.word	0xdfbffffe

08001f34 <_fflush_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	690b      	ldr	r3, [r1, #16]
 8001f38:	4605      	mov	r5, r0
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	b913      	cbnz	r3, 8001f44 <_fflush_r+0x10>
 8001f3e:	2500      	movs	r5, #0
 8001f40:	4628      	mov	r0, r5
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	b118      	cbz	r0, 8001f4e <_fflush_r+0x1a>
 8001f46:	6a03      	ldr	r3, [r0, #32]
 8001f48:	b90b      	cbnz	r3, 8001f4e <_fflush_r+0x1a>
 8001f4a:	f7ff fa37 	bl	80013bc <__sinit>
 8001f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f3      	beq.n	8001f3e <_fflush_r+0xa>
 8001f56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f58:	07d0      	lsls	r0, r2, #31
 8001f5a:	d404      	bmi.n	8001f66 <_fflush_r+0x32>
 8001f5c:	0599      	lsls	r1, r3, #22
 8001f5e:	d402      	bmi.n	8001f66 <_fflush_r+0x32>
 8001f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f62:	f7ff fc46 	bl	80017f2 <__retarget_lock_acquire_recursive>
 8001f66:	4628      	mov	r0, r5
 8001f68:	4621      	mov	r1, r4
 8001f6a:	f7ff ff5f 	bl	8001e2c <__sflush_r>
 8001f6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f70:	07da      	lsls	r2, r3, #31
 8001f72:	4605      	mov	r5, r0
 8001f74:	d4e4      	bmi.n	8001f40 <_fflush_r+0xc>
 8001f76:	89a3      	ldrh	r3, [r4, #12]
 8001f78:	059b      	lsls	r3, r3, #22
 8001f7a:	d4e1      	bmi.n	8001f40 <_fflush_r+0xc>
 8001f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f7e:	f7ff fc39 	bl	80017f4 <__retarget_lock_release_recursive>
 8001f82:	e7dd      	b.n	8001f40 <_fflush_r+0xc>

08001f84 <__swhatbuf_r>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	460c      	mov	r4, r1
 8001f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f8c:	2900      	cmp	r1, #0
 8001f8e:	b096      	sub	sp, #88	@ 0x58
 8001f90:	4615      	mov	r5, r2
 8001f92:	461e      	mov	r6, r3
 8001f94:	da0d      	bge.n	8001fb2 <__swhatbuf_r+0x2e>
 8001f96:	89a3      	ldrh	r3, [r4, #12]
 8001f98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	bf14      	ite	ne
 8001fa2:	2340      	movne	r3, #64	@ 0x40
 8001fa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fa8:	2000      	movs	r0, #0
 8001faa:	6031      	str	r1, [r6, #0]
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	b016      	add	sp, #88	@ 0x58
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	466a      	mov	r2, sp
 8001fb4:	f000 f848 	bl	8002048 <_fstat_r>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	dbec      	blt.n	8001f96 <__swhatbuf_r+0x12>
 8001fbc:	9901      	ldr	r1, [sp, #4]
 8001fbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fc6:	4259      	negs	r1, r3
 8001fc8:	4159      	adcs	r1, r3
 8001fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fce:	e7eb      	b.n	8001fa8 <__swhatbuf_r+0x24>

08001fd0 <__smakebuf_r>:
 8001fd0:	898b      	ldrh	r3, [r1, #12]
 8001fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fd4:	079d      	lsls	r5, r3, #30
 8001fd6:	4606      	mov	r6, r0
 8001fd8:	460c      	mov	r4, r1
 8001fda:	d507      	bpl.n	8001fec <__smakebuf_r+0x1c>
 8001fdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	6123      	str	r3, [r4, #16]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	6163      	str	r3, [r4, #20]
 8001fe8:	b003      	add	sp, #12
 8001fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fec:	ab01      	add	r3, sp, #4
 8001fee:	466a      	mov	r2, sp
 8001ff0:	f7ff ffc8 	bl	8001f84 <__swhatbuf_r>
 8001ff4:	9f00      	ldr	r7, [sp, #0]
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	4639      	mov	r1, r7
 8001ffa:	4630      	mov	r0, r6
 8001ffc:	f7ff f8c6 	bl	800118c <_malloc_r>
 8002000:	b948      	cbnz	r0, 8002016 <__smakebuf_r+0x46>
 8002002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002006:	059a      	lsls	r2, r3, #22
 8002008:	d4ee      	bmi.n	8001fe8 <__smakebuf_r+0x18>
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	81a3      	strh	r3, [r4, #12]
 8002014:	e7e2      	b.n	8001fdc <__smakebuf_r+0xc>
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	6020      	str	r0, [r4, #0]
 800201a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800201e:	81a3      	strh	r3, [r4, #12]
 8002020:	9b01      	ldr	r3, [sp, #4]
 8002022:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002026:	b15b      	cbz	r3, 8002040 <__smakebuf_r+0x70>
 8002028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800202c:	4630      	mov	r0, r6
 800202e:	f000 f81d 	bl	800206c <_isatty_r>
 8002032:	b128      	cbz	r0, 8002040 <__smakebuf_r+0x70>
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	81a3      	strh	r3, [r4, #12]
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	431d      	orrs	r5, r3
 8002044:	81a5      	strh	r5, [r4, #12]
 8002046:	e7cf      	b.n	8001fe8 <__smakebuf_r+0x18>

08002048 <_fstat_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4d07      	ldr	r5, [pc, #28]	@ (8002068 <_fstat_r+0x20>)
 800204c:	2300      	movs	r3, #0
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	f7fe fd50 	bl	8000afa <_fstat>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	d102      	bne.n	8002064 <_fstat_r+0x1c>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	b103      	cbz	r3, 8002064 <_fstat_r+0x1c>
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	20001d74 	.word	0x20001d74

0800206c <_isatty_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4d06      	ldr	r5, [pc, #24]	@ (8002088 <_isatty_r+0x1c>)
 8002070:	2300      	movs	r3, #0
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	602b      	str	r3, [r5, #0]
 8002078:	f7fe fd4f 	bl	8000b1a <_isatty>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	d102      	bne.n	8002086 <_isatty_r+0x1a>
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	b103      	cbz	r3, 8002086 <_isatty_r+0x1a>
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	bd38      	pop	{r3, r4, r5, pc}
 8002088:	20001d74 	.word	0x20001d74

0800208c <_init>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr

08002098 <_fini>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	bf00      	nop
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr
